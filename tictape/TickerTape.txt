Editor and other beans can communicate with it effectively.  The following code sample, TickerTape.java demonstrates most of the basic rules that should be followed when to ensure and a description of the file follows:

//: Filename:	TickerTape.java

//:  #1:  Include a package statement.
package com.ibm.sdm.util ;

import java.awt.* ;
import java.applet.* ;
import java.awt.event.* ;
import java.net.* ;

//:  #6.  Optionally, implement the java.io.Serializable interface or the java.io.Externalizable 	//:	Interface to provide object persistence.  Because TickerTape descends from 		
//:         java.awt.Component, we really do not have to declare the Serializable interface again; 	//:	but, for clarity we'll do it anyway.

public class TickerTape extends java.awt.Canvas
			implements Runnable, MouseListener, Serializable
{

	//:  Instance variables
	private String tickerText, flyOverText ;
	private int charHeight  ;
	private int prevX, nextX, baseline ;
	private Rectangle canvasRect, stringRect, clipRect ;
	private int delayRate ;
	private Color background, foreground ;
	private Font tickerFont ;
	private FontMetrics fontMetrics ;
	private Thread runner ;
	private int increment ;


	//:  #2:  Provide an empty constructor.

	//:  Provide default values for instance variables
	public TickerTape() {
		canvasRect = new Rectangle(0,0,250,50) ;
		stringRect = new Rectangle(0,0,0,0) ;
		clipRect = new Rectangle(0,0,0,0) ;
		background = new Color(180,180,180) ; // light gray (0,0,255) ; //: Blue
		foreground = new Color(0,0,0) ; // black (255,255,0) ;  //: Yellow
		setBackground(background) ;
		setForeground(foreground) ;
		tickerText = " " ;
		tickerFont = new Font("Helv", Font.PLAIN, 12) ;
		setFont(tickerFont) ;
	      	fontMetrics = getFontMetrics(tickerFont) ;
		delayRate = 300 ;
		addMouseListener(this) ;
		increment = 1 ;
	}



	//:  #4.  To expose a method to a visual editor, declare it public.

	//:  Create a new thread.
	public void start() {
		if(runner == null) {
			runner = new Thread(this) ;
			runner.start() ;
		}
	}


	//:  Destroy the thread.
	public void stop() {
		if(runner != null) {
			runner.stop() ;
			runner = null ;
		}

	}

	
	//:  In a separate asynchronous thread, determine new location and clip region of text.
	public void run( ) {
		while(true)	{
			try {
		  		prevX = nextX ;
		  		if(nextX + stringRect.width <= 0) {
	   		  		nextX = canvasRect.width - increment ;
					clipRect.x = 0 ;
					clipRect.width = increment ; 
		  		}
		  		else {
			  		nextX -= increment ;
					if(nextX > 0)
					      clipRect.x = nextX ;
					else
						clipRect.x = 0 ;

					if(canvasRect.width - nextX >= stringRect.width)
					       clipRect.width = stringRect.width + increment + 2   ;
					else 
					       clipRect.width = canvasRect.width - nextX + increment + 2   ;
		  		}
		  		repaint()  ;
				Thread.sleep(delayRate) ;
			}
			catch(InterruptedException excpt) {}
		}
		
	}


	//:  Specify new clip region.
	public void update(Graphics g) {
		g.clipRect(clipRect.x,clipRect.y, clipRect.width, clipRect.height) ;
		paint(g) ;
	}  


	//:  Erase old text and draw the new text.
	public void paint(Graphics g) {
		g.setColor(background) ;
		g.drawString(tickerText, prevX, baseline) ;
		g.setColor(foreground) ;
		g.drawString(tickerText, nextX, baseline) ;
	}


	//:  #5.  To expose an event and its related methods, simply implement one of the Java 		          Listener interfaces and override the method or methods from the interface.

	//: Implement MouseListener interface

	//:  Provide flyover help in status area.
	public void mouseEntered(MouseEvent anEvent) {
		Container parent = (Container)getParent() ;
		if(parent instanceof Applet) {
		   Applet applet = (Applet)parent ; 
		   String str = applet.getParameter("HTTP") ;
		   if(flyOverText != null) {
			applet.getAppletContext().showStatus(flyOverText) ;
		   }
		   else if(str != null) {
		      applet.getAppletContext().showStatus(applet.getParameter("HTTP")) ;
		   }
		}
	}

	
	//:  Remove flyover help from status area.
	public void mouseExited(MouseEvent anEvent) {
		Container parent = (Container)getParent() ;
		if(parent instanceof Applet) {
		   Applet applet = (Applet)parent ; 
		   applet.getAppletContext().showStatus(" ") ;
		}

	}


	public void mouseClicked(MouseEvent anEvent) {
	}


	//:  Check if flyover text is a valid URL--if so, display the web page.
	public void mousePressed(MouseEvent anEvent) {
		Container parent = (Container)getParent() ;
		if(parent instanceof Applet) {
		   Applet applet = (Applet)parent ; 
		   String str = applet.getParameter("HTTP") ;
		   if(flyOverText != null) {
			try {
			   URL url = new URL(flyOverText) ;
			   applet.getAppletContext().showDocument(url) ;

			}
			catch(MalformedURLException exception) {
			   applet.getAppletContext().showStatus("Malformed URL Exception thrown...") ;
			}
		   }
		   else if(str != null) {
			try {
			   URL url = new URL(str) ;
			   applet.getAppletContext().showDocument(url) ;
			}
			catch(MalformedURLException exception) {
			   applet.getAppletContext().showStatus("Malformed URL Exception thrown...") ;
			}

		     
		   }
		}

	}

	public void mouseReleased(MouseEvent anEvent) {
	}	


	//: #3.  To expose an instance variable to a visual editor, provide an accompanying 		//:       accessor (getter and setter) methods.

	//: Getters and Setters

	public void setBackground(Color color) {
		super.setBackground(color) ;
		background = color ;
	}

	public Color getBackground() {
		return background ;
	}

	public void setForeground(Color color) {
		super.setForeground(color) ;
		foreground = color ;
	}

	public Color getForeground() {
		return foreground ;
	}

	public void setFont(Font font) {
		super.setFont(font) ;
		tickerFont = font ;
		fontMetrics = getFontMetrics(tickerFont) ;
		calculateRectangles() ;
	}

	public Font getFont() {
		return(super.getFont()) ;
	}

	public void setTickerText(String string) {
		tickerText = string ;
		calculateRectangles() ;
	}

	public String getTickerText()	{
		return tickerText ;
	}


	public void setBounds(int x, int y, int width, int height) {
		super.setBounds(x,y,width,height) ;
		canvasRect.x = x ;
		canvasRect.y = y ;
		canvasRect.width = width ;
		canvasRect.height = height ; 
		calculateRectangles() ;  
	}

	public void setBounds(Rectangle rect) {
		super.setBounds(rect) ;
		canvasRect.x = rect.x ;
		canvasRect.y = rect.y ;
		canvasRect.width = rect.width ;
		canvasRect.height = rect.height ; 
		calculateRectangles() ;  
	}


	public Rectangle getBounds() {
		return(super.getBounds()) ;
	}

	public void setDelayRate(int rate) {
		delayRate = rate ;
	}

	public int getDelayRate() {
		return delayRate ;
	}

	public void setFlyOverText(String string) {
		flyOverText = string ;
	}

	public String getFlyOverText() {
		return flyOverText ;
	}

	public void setIncrement(int inc) {
		increment = inc ;
	}

	public int getIncrement() {
		return increment ;
	}

	public java.awt.Dimension getPreferredSize() {
		return(new java.awt.Dimension(canvasRect.width,canvasRect.height)) ;
	}

	public java.awt.Dimension getMinimumSize() {
		return(getPreferredSize()) ;
	}


	private void calculateRectangles() {
		charHeight = fontMetrics.getHeight() ;
		int maxAscent = fontMetrics.getMaxAscent() ;
		nextX = prevX = canvasRect.width ; 
		baseline = (canvasRect.height / 2) + (charHeight / 4) ; 
		
		stringRect.width = fontMetrics.stringWidth(tickerText) ;
		stringRect.height = charHeight ; 
     
		clipRect.x = nextX ;
		clipRect.y = baseline - fontMetrics.getMaxAscent() ; 
		clipRect.width = increment ;
		clipRect.height = charHeight  ;
	}
}


In the sample code above, notice that there is no  java.beans.Bean class from which a JavaBeans inherits.  Instead, a Java class is converted into a JavaBean by using the JavaBeans API as a guideline.  The JavaBean API serves as framework or software component model for defining reusable software components that can be manipulated within a visual builder tool such as VisualAge for Java's Visual Composition Editor.

