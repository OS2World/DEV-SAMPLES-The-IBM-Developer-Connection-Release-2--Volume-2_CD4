/*******************************************************************************
* FILE NAME: NbkTest.cpp                                                       *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     NbkTest                                                                  *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IFRAME_
#include <iframe.hpp>
#endif

#ifndef _INOTEBK_
#include <inotebk.hpp>
#endif

#ifndef _IPOINT_
#include <ipoint.hpp>
#endif

#ifndef _IVBNBKPG_
#include <ivbnbkpg.hpp>
#endif

#ifndef _IMCELCV_
#include <imcelcv.hpp>
#endif

#ifndef _IPUSHBUT_
#include <ipushbut.hpp>
#endif

#ifndef _ISTATTXT_
#include <istattxt.hpp>
#endif

#ifndef _IENTRYFD_
#include <ientryfd.hpp>
#endif

#ifndef _NBKPAGE_
#include "NbkPage.hpp"
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _NBKTEST_
#include "NbkTest.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for NbkTestConn0
//*****************************************************************************
class NbkTestConn0 : public IObserver, public IStandardNotifier {
public:
   virtual  ~NbkTestConn0(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, NbkTestNewPageFactFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   NbkPage * actionResult() const { return iActionResult; };
   NbkTestConn0 & setActionResult(NbkPage * aSelf) {
      iActionResult = aSelf;
      notifyObservers(INotificationEvent(actionResultId, *this));
      return *this;
      };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId actionResultId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : PushButton1(buttonClickEvent) to NewPageFact(new))");
         try {setActionResult(target->create());}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   NbkTestNewPageFactFactory * target;
   NbkPage * iActionResult;


};   //NbkTestConn0

const INotificationId NbkTestConn0::actionResultId = "NbkTestConn0::actionResult";

//*****************************************************************************
// Class definition for NbkTestConn1
//*****************************************************************************
class NbkTestConn1 : public IObserver, public IStandardNotifier {
public:
   virtual  ~NbkTestConn1(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, INotebook * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   NbkTestConn1 & setPageWindow(NbkTestConn0 * aSelf) {iPageWindow = aSelf; return *this;};
   IPageHandle actionResult() const { return iActionResult; };
   NbkTestConn1 & setActionResult(IPageHandle aSelf) {
      iActionResult = aSelf;
      notifyObservers(INotificationEvent(actionResultId, *this));
      return *this;
      };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId actionResultId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : PushButton1(buttonClickEvent) to Notebook1(addLastPage))");
         try {setActionResult(target->addLastPage(INotebook::PageSettings(INotebook::PageSettings::majorTab | INotebook::PageSettings::statusTextOn | INotebook::PageSettings::autoPageSize), iPageWindow->actionResult()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   INotebook * target;
   NbkTestConn0 * iPageWindow;
   IPageHandle iActionResult;


};   //NbkTestConn1

const INotificationId NbkTestConn1::actionResultId = "NbkTestConn1::actionResult";

//*****************************************************************************
// Class definition for NbkTestConn3
//*****************************************************************************
class NbkTestConn3 : public IObserver, public IStandardNotifier {
public:
   virtual  ~NbkTestConn3(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, INotebook * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   NbkTestConn3 & setReferencePage(NbkTestConn1 * aSelf) {iReferencePage = aSelf; return *this;};
   NbkTestConn3 & setTabText(IEntryField * aSelf) {iTabText = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : PushButton1(buttonClickEvent) to Notebook1(setTabText))");
         try {target->setTabText(iReferencePage->actionResult(), iTabText->text());}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   INotebook * target;
   NbkTestConn1 * iReferencePage;
   IEntryField * iTabText;


};   //NbkTestConn3


const INotificationId NbkTestNewPageFactFactory::newObjectCreatedId = "NbkTestNewPageFactFactory::newObjectCreatedId";

//------------------------------------------------------------------------------
// NbkTestNewPageFactFactory :: NbkTestNewPageFactFactory
//------------------------------------------------------------------------------
#pragma export (NbkTestNewPageFactFactory::NbkTestNewPageFactFactory(unsigned long))
NbkTestNewPageFactFactory::NbkTestNewPageFactFactory(unsigned long anId)
{
   enableNotification();
   partWindowId = anId;
}

//------------------------------------------------------------------------------
// NbkTestNewPageFactFactory :: ~NbkTestNewPageFactFactory
//------------------------------------------------------------------------------
#pragma export (NbkTestNewPageFactFactory::~NbkTestNewPageFactFactory())
NbkTestNewPageFactFactory::~NbkTestNewPageFactFactory()
{
   disableNotification();
}

//------------------------------------------------------------------------------
// NbkTestNewPageFactFactory :: create
//------------------------------------------------------------------------------
#pragma export (NbkTestNewPageFactFactory::create())
NbkPage * NbkTestNewPageFactFactory::create()
{
   NbkPage *iNewPageFact = new NbkPage(
      partWindowId+WNDOFFSET_NbkTest_NewPageFact, 
      IWindow::desktopWindow(), 
      0, 
      NbkPage::defaultFramingSpec(), 
      IMultiCellCanvas::defaultStyle() | IWindow::visible);
   iNewPageFact->enableNotification();
   iNewPageFact->initializePart();
   notifyObservers(INotificationEvent(newObjectCreatedId, *this, true, IEventData((void *)iNewPageFact)));
   return(iNewPageFact);
}

#pragma export (NbkTest::readyId)
const INotificationId NbkTest::readyId = "NbkTest::readyId";

#pragma export (NbkTest::partWindowId)
unsigned long NbkTest::partWindowId = 0;

//------------------------------------------------------------------------------
// NbkTest :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (NbkTest::defaultFramingSpec())
const IRectangle NbkTest::defaultFramingSpec()
{
   return(IRectangle(IPoint(30, IWindow::desktopWindow()->size().height() - 30 - 342),ISize(375, 342)));
}


//------------------------------------------------------------------------------
// NbkTest :: defaultTitle
//------------------------------------------------------------------------------
#pragma export (NbkTest::defaultTitle())
IString NbkTest::defaultTitle()
{
   return("Notebook test");
}


//------------------------------------------------------------------------------
// NbkTest :: NbkTest
//------------------------------------------------------------------------------
#pragma export (NbkTest::NbkTest(unsigned long, IWindow*, IWindow*, const IRectangle&, const IFrameWindow::Style&, const char*))
NbkTest::NbkTest(
      unsigned long id, 
      IWindow* parent, 
      IWindow* owner, 
      const IRectangle& rect, 
      const IFrameWindow::Style& style, 
      const char* title)
   : IFrameWindow((partWindowId) ? partWindowId : id, parent, owner, rect, style, title)
{
   partWindowId = (partWindowId) ? partWindowId : id;
   iNotebook1 = new INotebook(
      IC_FRAME_CLIENT_ID, 
      this, 
      this, 
      IRectangle());
   iMultiCellCanvas2 = new IMultiCellCanvas(
      partWindowId+WNDOFFSET_NbkTest_MultiCellCanvas2, 
      iNotebook1, 
      iNotebook1, 
      IRectangle());
   iPushButton1 = new IPushButton(
      partWindowId+WNDOFFSET_NbkTest_PushButton1, 
      iMultiCellCanvas2, 
      iMultiCellCanvas2, 
      IRectangle());
   iStaticText1 = new IStaticText(
      partWindowId+WNDOFFSET_NbkTest_StaticText1, 
      iMultiCellCanvas2, 
      iMultiCellCanvas2, 
      IRectangle());
   iEntryField4 = new IEntryField(
      partWindowId+WNDOFFSET_NbkTest_EntryField4, 
      iMultiCellCanvas2, 
      iMultiCellCanvas2, 
      IRectangle());
   iVBNotebookPage1 = new IVBNotebookPage(iNotebook1, INotebook::PageSettings::majorTab | INotebook::PageSettings::autoPageSize, iMultiCellCanvas2);
   iNewPageFact = new NbkTestNewPageFactFactory(partWindowId);

   conn0 = new NbkTestConn0();
   conn1 = new NbkTestConn1();
   conn3 = new NbkTestConn3();

   this->setFocus();
   this->setClient(iNotebook1);
   iNotebook1->setBinding(INotebook::spiral);
   iNotebook1->setMajorTabSize(ISize(80, 30));
   iNotebook1->setTabShape(INotebook::rounded);
   iNotebook1->setOrientation(INotebook::backpagesRightTabsBottom);
   iVBNotebookPage1->setTabText("Page 1");
   iMultiCellCanvas2->addToCell(iPushButton1, 2, 5, 1, 1);
   iMultiCellCanvas2->addToCell(iStaticText1, 2, 3, 1, 1);
   iMultiCellCanvas2->addToCell(iEntryField4, 4, 3, 1, 1);
   iMultiCellCanvas2->setColumnWidth(4, IMultiCellCanvas::defaultCell().width(), true);
   iMultiCellCanvas2->setColumnWidth(5, IMultiCellCanvas::defaultCell().width(), false);
   iMultiCellCanvas2->setRowHeight(6, IMultiCellCanvas::defaultCell().height(), false);
   iPushButton1->setText("Add page");
   iStaticText1->setText("Tab text");
   iEntryField4->setMinimumSize(ISize(18, 29));
}     //end constructor


//------------------------------------------------------------------------------
// NbkTest :: ~NbkTest
//------------------------------------------------------------------------------
#pragma export (NbkTest::~NbkTest())
NbkTest::~NbkTest()
{
   conn0->stopHandlingNotificationsFor(*iPushButton1);
   conn1->stopHandlingNotificationsFor(*iPushButton1);
   conn3->stopHandlingNotificationsFor(*iPushButton1);

   delete conn0;
   delete conn1;
   delete conn3;


   delete iNotebook1;
   delete iVBNotebookPage1;
   delete iMultiCellCanvas2;
   delete iPushButton1;
   delete iStaticText1;
   delete iEntryField4;
   delete iNewPageFact;
}

//------------------------------------------------------------------------------
// NbkTest :: initializePart
//------------------------------------------------------------------------------
#pragma export (NbkTest::initializePart())
NbkTest & NbkTest::initializePart()
{
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// NbkTest :: makeConnections
//------------------------------------------------------------------------------
#pragma export (NbkTest::makeConnections())
Boolean NbkTest::makeConnections()
{
   this->enableNotification();
   iNotebook1->enableNotification();
   iVBNotebookPage1->enableNotification();
   iMultiCellCanvas2->enableNotification();
   iPushButton1->enableNotification();
   iStaticText1->enableNotification();
   iEntryField4->enableNotification();
   iNewPageFact->enableNotification();

   conn0->initialize(iPushButton1, iNewPageFact);
   conn0->handleNotificationsFor(*iPushButton1);
   conn1->initialize(iPushButton1, iNotebook1);
   conn1->handleNotificationsFor(*iPushButton1);
   conn1->setPageWindow(conn0);
   conn3->initialize(iPushButton1, iNotebook1);
   conn3->handleNotificationsFor(*iPushButton1);
   conn3->setReferencePage(conn1);
   conn3->setTabText(iEntryField4);

   return true;
}



