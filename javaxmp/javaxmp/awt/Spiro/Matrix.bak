public class Matrix
{
  public double m10 ;
  public double m11 ;
  public double m12 ;
  public double m20 ;
  public double m21 ;
  public double m22 ;
  public double m30 ;
  public double m31 ;
  public double m32 ;

  public int centerX ;
  public int centerY ;

  //-------------------------------------------------------------------------
  // Constructor.
  //
  //-------------------------------------------------------------------------
  public Matrix()
  {
    makeIdentity( ) ;
  }

  //-------------------------------------------------------------------------
  // makeIdentity()
  //
  // Reset the matrix instance to be the identity matrix, such that any point
  // multiplied against this matrix will be unchanged.
  //
  // The identity matrix is defined as:
  //
  //           Ú       ¿
  //           ³ 1 0 0 ³
  //           ³ 0 1 0 ³
  //           ³ 0 0 1 ³
  //           À       Ù
  //-------------------------------------------------------------------------
  public void makeIdentity()
  {
    m10 = 1 ;    m11 = 0 ;   m12 = 0 ;
    m20 = 0 ;    m21 = 1 ;   m22 = 0 ;
    m30 = 0 ;    m31 = 0 ;   m32 = 1 ;

    centerX = 0 ;
    centerY = 0 ;
  }

  //-------------------------------------------------------------------------
  // updateMatrx()
  //
  // Update this matrix to have the same contents as the passed in matrix,
  //-------------------------------------------------------------------------
  public void updateMatrix( Matrix m )
  {
    this.m10 = m.m10 ;
    this.m11 = m.m11 ;
    this.m12 = m.m12 ;
    this.m20 = m.m20 ;
    this.m21 = m.m21 ;
    this.m22 = m.m22 ;
    this.m30 = m.m30 ;
    this.m31 = m.m31 ;
    this.m32 = m.m32 ;
  }


  //-------------------------------------------------------------------------
  // transformPoints()
  //
  //-------------------------------------------------------------------------
  public void transformPoints( int[] x, int[] y )
  {
    if ( centerX != 0 )
    {
      Matrix temp = new Matrix() ;

      temp.setTranslation( -centerX, -centerY ) ;

      temp.transformPoints( x,y ) ;
    }

    for ( int i=0; i < x.length; i++ )
    {
      x[i] = (int) ( (double)x[i] * m10 + (double)y[i] * m20 + m30 ) ;
      y[i] = (int) ( (double)x[i] * m11 + (double)y[i] * m21 + m31 ) ;
    }

    if ( centerX != 0 )
    {
      Matrix temp = new Matrix() ;

      temp.setTranslation( centerX, centerY ) ;

      temp.transformPoints( x,y ) ;
    }

  }

  //-------------------------------------------------------------------------
  // transformPoints()
  //
  //-------------------------------------------------------------------------
  public void transformPoints( int [] x, int [] y, int n )
  {
  }


  //-------------------------------------------------------------------------
  // setScaling()
  //
  // Helper method to setup a transformation to give the required scaling.
  //
  //-------------------------------------------------------------------------
  public void setScaling(int x, int y)
  {
    this.m10 = x ;
    this.m21 = y ;
  }

  //-------------------------------------------------------------------------
  // setRotation()
  //
  // Helper method to setup a transformation to give the required rotation.
  //
  // A rotation of r degrees for a point (x,y) can be defined as:
  //
  //    x` = x * cos(r) - y * sin(r)
  //    y` = x * sin(r) + y * cos(r)
  //
  // A negative angle will cause a clockwise rotation:
  //
  //    x` =  x * cos(r) + y * sin(r)
  //    y` = -x * sin(r) + y * cos(r)
  //
  // Note that this assumes an origin of (0,0).
  //
  // A simple counterclockwise rotation of r degrees can be defined using a
  // matrix as follows:
  //
  //           Ú                   ¿
  //           ³  cos(r) sin(r)  0 ³
  //           ³ -sin(r) cos(r)  0 ³
  //           ³   0      0      1 ³
  //           À                   Ù
  //
  // A simple clockwise rotation of r degrees can be defined as:
  //
  //           Ú                   ¿
  //           ³  cos(r) -sin(r) 0 ³
  //           ³  sin(r)  cos(r) 0 ³
  //           ³   0      0      1 ³
  //           À                   Ù
  //
  // To rotate a point about a given non zero point, you effectively have a
  // three step process.
  //
  //   1. Subtract the center point of the rotation from each point thus moving
  //      the origin of each point to be (0,0)
  //   2. Rotate the points.
  //   3. Add back in the center point.
  //
  // Each of these three steps could be expressed as a separate matrix where
  // (p,q) is the center point of the rotation and r is the angle of the
  // rotation.
  //
  //   Ú         ¿  Ú                   ¿  Ú         ¿
  //   ³  1  0 0 ³  ³  cos(r)  sin(r) 0 ³  ³  1  0 0 ³
  //   ³  0  1 0 ³  ³ -sin(r)  cos(r) 0 ³  ³  0  1 0 ³
  //   ³ -p -q 1 ³  ³   0      0      1 ³  ³  p  q 1 ³
  //   À         Ù  À                   Ù  À         Ù
  //
  // A single matrix can be derived that represents this 3 stage operation
  // by multiplying each of the above matrices together. The resultant matrix
  // that defines a rotation of r degrees about a point (p,q) is as follows:
  //
  //
  //         Ú                                                     ¿
  //         ³  cos(r)                sin(r)                    0  ³
  //         ³ -sin(r)                cos(r)                    0  ³
  //         ³  p(1-cos(r))+q sin(r)  -p sin(r) + q(1-cos(r))   1  ³
  //         À                                                     Ù
  // The last row is a simplification of:
  //
  //           -p cos(r) + q sin(r) + p  and  -p sin(r) + q cos(r) + q
  //-------------------------------------------------------------------------
  public void setRotation( int x, int y, double degs )
  {
    //------------------------------------------------------
    // Convert degrees to radians for Java's trig functions.
    //------------------------------------------------------

    double rads = degs * Math.PI/180 ;

    //-------------------------------------------
    // Setup the correct values for the rotation.
    //-------------------------------------------

    m10 =  Math.cos( rads ) ;
    m11 =  Math.sin( rads ) ;
    m20 = -Math.sin( rads ) ;
    m21 =  Math.cos( rads ) ;

    m30 = -x * Math.cos(rads) + y * Math.sin(rads) + x ;
    m31 = -x * Math.sin(rads) + y * Math.cos(rads) + y;
  }

  //-------------------------------------------------------------------------
  // setTranslation()
  //
  // Helper method to setup a transformation to give the required translation.
  //
  //-------------------------------------------------------------------------
  public void setTranslation(int x, int y)
  {
    this.m30 = x ;
    this.m31 = y ;
  }

  //-------------------------------------------------------------------------
  // shear()
  //
  // Helper method to setup a transformation to give the required x and y
  // shearing.
  //
  //-------------------------------------------------------------------------
  public void setShear()
  {
  }

  //-------------------------------------------------------------------------
  //
  //-------------------------------------------------------------------------
  public void setXReflection()
  {
  }

  //-------------------------------------------------------------------------
  //
  //-------------------------------------------------------------------------
  public void setYReflection()
  {
  }

  //-------------------------------------------------------------------------
  // toString()
  //
  //-------------------------------------------------------------------------
  public String toString()
  {
    return "Matrix" ;
  }

  //-------------------------------------------------------------------------
  // dumpToConsole()
  //
  // Dump out this matrix to the system console.
  //-------------------------------------------------------------------------
  public void dumpToConsole()
  {
    System.out.println( "Matrix contents" ) ;
    System.out.println( "===============" ) ;
    System.out.println( "m10 = " + m10 ) ;
    System.out.println( "m11 = " + m11 ) ;
    System.out.println( "m12 = " + m12 ) ;
    System.out.println( "m20 = " + m20 ) ;
    System.out.println( "m21 = " + m21 ) ;
    System.out.println( "m22 = " + m22 ) ;
    System.out.println( "m30 = " + m30 ) ;
    System.out.println( "m31 = " + m31 ) ;
    System.out.println( "m32 = " + m32 ) ;
  }
}
