//------------------------------------------------------------------------
// This code is generated by IBM VisualAge for Java Data Access Builder.
// WARNING:  User modifications will be lost on next code generation.
//------------------------------------------------------------------------

package IsvappsRMI;

import java.lang.*;
import java.math.*;
import java.util.*;
import java.beans.*;
import java.sql.*;
import COM.ibm.ivj.eab.data.*;
import java.io.Serializable;

//----------------------------------------------------------------
//
// IsvappsRMI - persistent object class
//
//---------------------------------------------------------------- 

/**
  * Copyright information goes here....
  * Author information goes here.....Mickey Nix, IBM, 1998
  * IsvappsRMI table mapping information goes here.....
  */

public class IsvappsRMI extends PersistentObject implements Cloneable, Serializable    //: Nix changed name to IsvappsRMI
{

 //----------------------------------------------------------------
 // Constructors
 //----------------------------------------------------------------
  public IsvappsRMI() {
    this(null,null); 
  }

  public IsvappsRMI(DatastoreJDBC aDatastore) {
    this(null,aDatastore); 
  } 

  public IsvappsRMI(IsvappsDataId aDataId) {
    this(aDataId,null);
  }

  public IsvappsRMI(IsvappsDataId aDataId, DatastoreJDBC aDatastore) {
    super(aDatastore);
    if ( aDataId == null ) theDataId = new IsvappsDataId();
    else theDataId = aDataId;

    iDataIdAdapter = new PODataIdPropertyChangeAdapter(theDataId,this);
  } 

 //----------------------------------------------------------------
 // clone - returns a copy of the object
 //----------------------------------------------------------------
  public Object clone() {
 
    IsvappsRMI obj = new IsvappsRMI((IsvappsDataId)theDataId.clone(),getObjectsDatastore());

    obj.iProduct_name = iProduct_name; 
    obj.iShort_name = iShort_name; 
    obj.iDescription = iDescription; 
    obj.iClassification = iClassification; 
    obj.iType = iType; 
    obj.iPlatforms = iPlatforms; 
    obj.iLevel = iLevel; 
    obj.iFile = iFile; 
    obj.iSize = iSize; 
    obj.iSupplier_id = iSupplier_id; 
    obj.iCreate_date = iCreate_date; 
    obj.iUrl = iUrl; 
    obj.iReadme = iReadme; 

    return obj;
  }

 //----------------------------------------------------------------
 // equals - compares itself with another object
 //----------------------------------------------------------------
  public boolean equals(Object anObject) {

    if ( !(anObject instanceof IsvappsRMI) ) return false;
    IsvappsRMI aIsvapps = (IsvappsRMI)anObject;

    if ( !theDataId.equals(aIsvapps.theDataId) ) return false; 

    if ( iProduct_name != aIsvapps.iProduct_name ) {
       if ( iProduct_name == null || aIsvapps.iProduct_name == null) return false;
       else if ( !iProduct_name.equals( aIsvapps.iProduct_name ) ) return false;
     } 
    if ( iShort_name != aIsvapps.iShort_name ) {
       if ( iShort_name == null || aIsvapps.iShort_name == null) return false;
       else if ( !iShort_name.equals( aIsvapps.iShort_name ) ) return false;
     } 
    if ( iDescription != aIsvapps.iDescription ) {
       if ( iDescription == null || aIsvapps.iDescription == null) return false;
       else if ( !iDescription.equals( aIsvapps.iDescription ) ) return false;
     } 
    if ( iClassification != aIsvapps.iClassification ) {
       if ( iClassification == null || aIsvapps.iClassification == null) return false;
       else if ( !iClassification.equals( aIsvapps.iClassification ) ) return false;
     } 
    if ( iType != aIsvapps.iType ) {
       if ( iType == null || aIsvapps.iType == null) return false;
       else if ( !iType.equals( aIsvapps.iType ) ) return false;
     } 
    if ( iPlatforms != aIsvapps.iPlatforms ) {
       if ( iPlatforms == null || aIsvapps.iPlatforms == null) return false;
       else if ( !iPlatforms.equals( aIsvapps.iPlatforms ) ) return false;
     } 
    if ( iLevel != aIsvapps.iLevel ) {
       if ( iLevel == null || aIsvapps.iLevel == null) return false;
       else if ( !iLevel.equals( aIsvapps.iLevel ) ) return false;
     } 
    if ( iFile != aIsvapps.iFile ) {
       if ( iFile == null || aIsvapps.iFile == null) return false;
       else if ( !iFile.equals( aIsvapps.iFile ) ) return false;
     } 
    if ( iSize != aIsvapps.iSize ) {
       if ( iSize == null || aIsvapps.iSize == null) return false;
       else if ( !iSize.equals( aIsvapps.iSize ) ) return false;
     } 
    if ( iSupplier_id != aIsvapps.iSupplier_id ) {
       if ( iSupplier_id == null || aIsvapps.iSupplier_id == null) return false;
       else if ( !iSupplier_id.equals( aIsvapps.iSupplier_id ) ) return false;
     } 
    if ( iCreate_date != aIsvapps.iCreate_date ) {
       if ( iCreate_date == null || aIsvapps.iCreate_date == null) return false;
       else if ( !iCreate_date.equals( aIsvapps.iCreate_date ) ) return false;
     } 
    if ( iUrl != aIsvapps.iUrl ) {
       if ( iUrl == null || aIsvapps.iUrl == null) return false;
       else if ( !iUrl.equals( aIsvapps.iUrl ) ) return false;
     } 
    if ( iReadme != aIsvapps.iReadme ) {
       if ( iReadme == null || aIsvapps.iReadme == null) return false;
       else if ( !iReadme.equals( aIsvapps.iReadme ) ) return false;
     } 

    return true;
  }

 //----------------------------------------------------------------
 // Default Datastore
 //----------------------------------------------------------------
  public static DatastoreJDBC getDefaultDatastore() { return iIsvappsDatastore; }
  public static void setDefaultDatastore(DatastoreJDBC aDatastore) { iIsvappsDatastore = aDatastore; }
  public DatastoreJDBC getCurrentDatastore() {
    if (getObjectsDatastore() != null) return getObjectsDatastore();
    else if (getDefaultDatastore() != null) return getDefaultDatastore();
    else return DatastoreJDBC.getApplicationDatastore();
  }
  protected static DatastoreJDBC _getStaticDatastore() {
    if (iIsvappsDatastore != null) return iIsvappsDatastore;
    else return DatastoreJDBC.getApplicationDatastore();
  }
  private static DatastoreJDBC iIsvappsDatastore;

  public boolean hasDataId() { return true; }
  public boolean isReadOnly() { return false; }

 //----------------------------------------------------------------
 // methods for setting the tablename dynamically
 //----------------------------------------------------------------
  public static void setQualifier(String qual) {
    if (qual == null) _qualifier = "";
    else if (qual.equals("")) _qualifier = qual;
    else if (!qual.endsWith(".")) _qualifier = qual + ".";
    else _qualifier = qual;
  }
  public static String getQualifier() { return _qualifier; }
  private static String _qualifier = "MNIX.";

 //----------------------------------------------------------------
 // Display methods
 //----------------------------------------------------------------
  public String toString(String aSeparator)
  {
    return (getProduct_id() + aSeparator + 
            getProduct_name() + aSeparator + 
            getShort_name() + aSeparator + 
            getDescription() + aSeparator + 
            getClassification() + aSeparator + 
            getType() + aSeparator + 
            getPlatforms() + aSeparator + 
            getLevel() + aSeparator + 
            String.valueOf(getFile()) + aSeparator + 
            String.valueOf(getSize()) + aSeparator + 
            getSupplier_id() + aSeparator + 
            String.valueOf(getCreate_date()) + aSeparator + 
            getUrl() + aSeparator + 
            getReadme());
  }
  public String toString() { return toString("."); } 

 //----------------------------------------------------------------
 // IsvappsDataId
 //----------------------------------------------------------------
  public IsvappsDataId getDataId() { return theDataId; }
  public PODataId getObjectDataId() { return theDataId; }
  public void setObjectDataId(PODataId aDataId) throws DAException {
    setDataId((IsvappsDataId)aDataId);
  }

  public void setDataId(IsvappsDataId aDataId) throws DAException {
    if (aDataId == null) throw new DAException(DAResource.CANT_SET_DATAID_NULL);

    IsvappsDataId tempDataId = theDataId;

    theDataId = aDataId;
    iDataIdAdapter.setSource(theDataId);

    setModified(true);
    for(int i=0; i < theDataId.modified.length; i++) theDataId.modified[i] = true;

    // fire property change events for the dataid and its properties
    firePropertyChange("dataId", tempDataId, aDataId); 
    firePropertyChange("product_id", tempDataId.getProduct_id(), aDataId.getProduct_id()); 

  }

  private IsvappsDataId theDataId;
  private transient PODataIdPropertyChangeAdapter iDataIdAdapter;
  

  //----------------------------------------------------------------
  // IsvappsDataId product_id access methods
  //----------------------------------------------------------------
   public String getProduct_id() { return theDataId.getProduct_id(); }
   public void setProduct_id(String aProduct_id) { theDataId.setProduct_id(aProduct_id); }
   void _setProduct_id(String aProduct_id) { theDataId._setProduct_id(aProduct_id); }
   public boolean isProduct_idNullable() { return false; }

 //----------------------------------------------------------------
 // IsvappsRMI Attributes and methods
 //----------------------------------------------------------------

  /*--------------------------------------------------------------
     IsvappsRMI product_name access methods
     This attribute is mapped to PRODUCT_NAME.
    --------------------------------------------------------------*/
   private String iProduct_name = null;

   public String getProduct_name() { return iProduct_name; }
   public void setProduct_name(String aProduct_name) { 
     String temp = iProduct_name; 
     modified[0] = true;
     iProduct_name = aProduct_name; 
     setModified(true);
     _changes.firePropertyChange("product_name",  temp, aProduct_name); 
   } 

   void _setProduct_name(String aProduct_name) {
     if (_sendingAttributeEvents) {
       String temp = iProduct_name; 
       iProduct_name = aProduct_name; 
       _changes.firePropertyChange("product_name",  temp, aProduct_name); 
     } else {
       iProduct_name = aProduct_name;
     }
   } 

   public boolean isProduct_nameNullable() { return false; } 

  /*--------------------------------------------------------------
     IsvappsRMI short_name access methods
     This attribute is mapped to SHORT_NAME.
    --------------------------------------------------------------*/
   private String iShort_name = null;

   public String getShort_name() { return iShort_name; }
   public void setShort_name(String aShort_name) { 
     String temp = iShort_name; 
     modified[1] = true;
     iShort_name = aShort_name; 
     setModified(true);
     _changes.firePropertyChange("short_name",  temp, aShort_name); 
   } 

   void _setShort_name(String aShort_name) {
     if (_sendingAttributeEvents) {
       String temp = iShort_name; 
       iShort_name = aShort_name; 
       _changes.firePropertyChange("short_name",  temp, aShort_name); 
     } else {
       iShort_name = aShort_name;
     }
   } 

   public boolean isShort_nameNullable() { return false; } 

  /*--------------------------------------------------------------
     IsvappsRMI description access methods
     This attribute is mapped to DESCRIPTION.
    --------------------------------------------------------------*/
   private String iDescription = null;

   public String getDescription() { return iDescription; }
   public void setDescription(String aDescription) { 
     String temp = iDescription; 
     modified[2] = true;
     iDescription = aDescription; 
     setModified(true);
     _changes.firePropertyChange("description",  temp, aDescription); 
   } 

   void _setDescription(String aDescription) {
     if (_sendingAttributeEvents) {
       String temp = iDescription; 
       iDescription = aDescription; 
       _changes.firePropertyChange("description",  temp, aDescription); 
     } else {
       iDescription = aDescription;
     }
   } 

   public boolean isDescriptionNullable() { return true; } 

  /*--------------------------------------------------------------
     IsvappsRMI classification access methods
     This attribute is mapped to CLASSIFICATION.
    --------------------------------------------------------------*/
   private String iClassification = null;

   public String getClassification() { return iClassification; }
   public void setClassification(String aClassification) { 
     String temp = iClassification; 
     modified[3] = true;
     iClassification = aClassification; 
     setModified(true);
     _changes.firePropertyChange("classification",  temp, aClassification); 
   } 

   void _setClassification(String aClassification) {
     if (_sendingAttributeEvents) {
       String temp = iClassification; 
       iClassification = aClassification; 
       _changes.firePropertyChange("classification",  temp, aClassification); 
     } else {
       iClassification = aClassification;
     }
   } 

   public boolean isClassificationNullable() { return true; } 

  /*--------------------------------------------------------------
     IsvappsRMI type access methods
     This attribute is mapped to TYPE.
    --------------------------------------------------------------*/
   private String iType = null;

   public String getType() { return iType; }
   public void setType(String aType) { 
     String temp = iType; 
     modified[4] = true;
     iType = aType; 
     setModified(true);
     _changes.firePropertyChange("type",  temp, aType); 
   } 

   void _setType(String aType) {
     if (_sendingAttributeEvents) {
       String temp = iType; 
       iType = aType; 
       _changes.firePropertyChange("type",  temp, aType); 
     } else {
       iType = aType;
     }
   } 

   public boolean isTypeNullable() { return true; } 

  /*--------------------------------------------------------------
     IsvappsRMI platforms access methods
     This attribute is mapped to PLATFORMS.
    --------------------------------------------------------------*/
   private String iPlatforms = null;

   public String getPlatforms() { return iPlatforms; }
   public void setPlatforms(String aPlatforms) { 
     String temp = iPlatforms; 
     modified[5] = true;
     iPlatforms = aPlatforms; 
     setModified(true);
     _changes.firePropertyChange("platforms",  temp, aPlatforms); 
   } 

   void _setPlatforms(String aPlatforms) {
     if (_sendingAttributeEvents) {
       String temp = iPlatforms; 
       iPlatforms = aPlatforms; 
       _changes.firePropertyChange("platforms",  temp, aPlatforms); 
     } else {
       iPlatforms = aPlatforms;
     }
   } 

   public boolean isPlatformsNullable() { return true; } 

  /*--------------------------------------------------------------
     IsvappsRMI level access methods
     This attribute is mapped to LEVEL.
    --------------------------------------------------------------*/
   private String iLevel = null;

   public String getLevel() { return iLevel; }
   public void setLevel(String aLevel) { 
     String temp = iLevel; 
     modified[6] = true;
     iLevel = aLevel; 
     setModified(true);
     _changes.firePropertyChange("level",  temp, aLevel); 
   } 

   void _setLevel(String aLevel) {
     if (_sendingAttributeEvents) {
       String temp = iLevel; 
       iLevel = aLevel; 
       _changes.firePropertyChange("level",  temp, aLevel); 
     } else {
       iLevel = aLevel;
     }
   } 

   public boolean isLevelNullable() { return true; } 

  /*--------------------------------------------------------------
     IsvappsRMI file access methods
     This attribute is mapped to FILE.
    --------------------------------------------------------------*/
   private byte[] iFile = null;

   public byte[] getFile() { return iFile; }
   public void setFile(byte[] aFile) { 
     byte[] temp = iFile; 
     modified[7] = true;
     iFile = aFile; 
     setModified(true);
     _changes.firePropertyChange("file",  temp, aFile); 
   } 

   void _setFile(byte[] aFile) {
     if (_sendingAttributeEvents) {
       byte[] temp = iFile; 
       iFile = aFile; 
       _changes.firePropertyChange("file",  temp, aFile); 
     } else {
       iFile = aFile;
     }
   } 

   public boolean isFileNullable() { return true; } 

  /*--------------------------------------------------------------
     IsvappsRMI size access methods
     This attribute is mapped to SIZE.
    --------------------------------------------------------------*/
   private Integer iSize = null;

   public Integer getSize() { return iSize; }
   public void setSize(Integer aSize) { 
     Integer temp = iSize; 
     modified[8] = true;
     iSize = aSize; 
     setModified(true);
     _changes.firePropertyChange("size",  temp, aSize); 
   } 

   void _setSize(Integer aSize) {
     if (_sendingAttributeEvents) {
       Integer temp = iSize; 
       iSize = aSize; 
       _changes.firePropertyChange("size",  temp, aSize); 
     } else {
       iSize = aSize;
     }
   } 

   public boolean isSizeNullable() { return true; } 

  /*--------------------------------------------------------------
     IsvappsRMI supplier_id access methods
     This attribute is mapped to SUPPLIER_ID.
    --------------------------------------------------------------*/
   private String iSupplier_id = null;

   public String getSupplier_id() { return iSupplier_id; }
   public void setSupplier_id(String aSupplier_id) { 
     String temp = iSupplier_id; 
     modified[9] = true;
     iSupplier_id = aSupplier_id; 
     setModified(true);
     _changes.firePropertyChange("supplier_id",  temp, aSupplier_id); 
   } 

   void _setSupplier_id(String aSupplier_id) {
     if (_sendingAttributeEvents) {
       String temp = iSupplier_id; 
       iSupplier_id = aSupplier_id; 
       _changes.firePropertyChange("supplier_id",  temp, aSupplier_id); 
     } else {
       iSupplier_id = aSupplier_id;
     }
   } 

   public boolean isSupplier_idNullable() { return false; } 

  /*--------------------------------------------------------------
     IsvappsRMI create_date access methods
     This attribute is mapped to CREATE_DATE.
    --------------------------------------------------------------*/
   private java.sql.Date iCreate_date = null;

   public java.sql.Date getCreate_date() { return iCreate_date; }
   public void setCreate_date(java.sql.Date aCreate_date) { 
     java.sql.Date temp = iCreate_date; 
     modified[10] = true;
     iCreate_date = aCreate_date; 
     setModified(true);
     _changes.firePropertyChange("create_date",  temp, aCreate_date); 
   } 

   void _setCreate_date(java.sql.Date aCreate_date) {
     if (_sendingAttributeEvents) {
       java.sql.Date temp = iCreate_date; 
       iCreate_date = aCreate_date; 
       _changes.firePropertyChange("create_date",  temp, aCreate_date); 
     } else {
       iCreate_date = aCreate_date;
     }
   } 

   public boolean isCreate_dateNullable() { return true; } 

  /*--------------------------------------------------------------
     IsvappsRMI url access methods
     This attribute is mapped to URL.
    --------------------------------------------------------------*/
   private String iUrl = null;

   public String getUrl() { return iUrl; }
   public void setUrl(String aUrl) { 
     String temp = iUrl; 
     modified[11] = true;
     iUrl = aUrl; 
     setModified(true);
     _changes.firePropertyChange("url",  temp, aUrl); 
   } 

   void _setUrl(String aUrl) {
     if (_sendingAttributeEvents) {
       String temp = iUrl; 
       iUrl = aUrl; 
       _changes.firePropertyChange("url",  temp, aUrl); 
     } else {
       iUrl = aUrl;
     }
   } 

   public boolean isUrlNullable() { return true; } 

  /*--------------------------------------------------------------
     IsvappsRMI readme access methods
     This attribute is mapped to README.
    --------------------------------------------------------------*/
   private String iReadme = null;

   public String getReadme() { return iReadme; }
   public void setReadme(String aReadme) { 
     String temp = iReadme; 
     modified[12] = true;
     iReadme = aReadme; 
     setModified(true);
     _changes.firePropertyChange("readme",  temp, aReadme); 
   } 

   void _setReadme(String aReadme) {
     if (_sendingAttributeEvents) {
       String temp = iReadme; 
       iReadme = aReadme; 
       _changes.firePropertyChange("readme",  temp, aReadme); 
     } else {
       iReadme = aReadme;
     }
   } 

   public boolean isReadmeNullable() { return true; } 


 //----------------------------------------------------------------
 // Database access methods
 //----------------------------------------------------------------

  public void update(IsvappsDataId aDataId) throws DAException {

    if ( !_onBackground() && isAsynchronous() ) {
      Object[] params = {aDataId};
      _putOnBackgroundThread( "update(dataId)", params );
      return;
    }

    try {
      if (getCurrentDatastore() == null) throw new DAException(DAResource.NO_CONNECT_EXIST);
      if (aDataId == null) throw new DAException(DAResource.CANT_SET_DATAID_NULL);
      if (theDataId.isModified()) setAllModified();

      _stmt = getCurrentDatastore().getConnection().prepareStatement(
          generator.genUpdateDataId(getQualifier(), modified)
        );

      int index=1; 

      if (aDataId.getProduct_id() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "product_id");
      if (aDataId.getProduct_id().length() > 10) throw new DAException(DAResource.INVALID_LENGTH, "product_id"); 
      _stmt.setObject(index++, aDataId.getProduct_id(), Types.CHAR); 

      if (modified[0]) { 
        if (getProduct_name() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "product_name");
        if (getProduct_name().length() > 40) throw new DAException(DAResource.INVALID_LENGTH, "product_name"); 
        _stmt.setObject(index++, getProduct_name(), Types.VARCHAR); 
      }

      if (modified[1]) { 
        if (getShort_name() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "short_name");
        if (getShort_name().length() > 10) throw new DAException(DAResource.INVALID_LENGTH, "short_name"); 
        _stmt.setObject(index++, getShort_name(), Types.CHAR); 
      }

      if (modified[2]) { 
        if (getDescription() == null) _stmt.setNull(index++, Types.VARCHAR);
        else if (getDescription().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "description"); 
        else _stmt.setObject(index++, getDescription(), Types.VARCHAR); 
      }

      if (modified[3]) { 
        if (getClassification() == null) _stmt.setNull(index++, Types.CHAR);
        else if (getClassification().length() > 10) throw new DAException(DAResource.INVALID_LENGTH, "classification"); 
        else _stmt.setObject(index++, getClassification(), Types.CHAR); 
      }

      if (modified[4]) { 
        if (getType() == null) _stmt.setNull(index++, Types.CHAR);
        else if (getType().length() > 10) throw new DAException(DAResource.INVALID_LENGTH, "type"); 
        else _stmt.setObject(index++, getType(), Types.CHAR); 
      }

      if (modified[5]) { 
        if (getPlatforms() == null) _stmt.setNull(index++, Types.VARCHAR);
        else if (getPlatforms().length() > 50) throw new DAException(DAResource.INVALID_LENGTH, "platforms"); 
        else _stmt.setObject(index++, getPlatforms(), Types.VARCHAR); 
      }

      if (modified[6]) { 
        if (getLevel() == null) _stmt.setNull(index++, Types.VARCHAR);
        else if (getLevel().length() > 20) throw new DAException(DAResource.INVALID_LENGTH, "level"); 
        else _stmt.setObject(index++, getLevel(), Types.VARCHAR); 
      }

      if (modified[7]) { 
        if (getFile() == null) _stmt.setNull(index++, Types.LONGVARBINARY);
        else _stmt.setObject(index++, getFile(), Types.LONGVARBINARY); 
      }

      if (modified[8]) { 
        if (getSize() == null) _stmt.setNull(index++, Types.INTEGER);
        else _stmt.setObject(index++, getSize(), Types.INTEGER); 
      }

      if (modified[9]) { 
        if (getSupplier_id() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "supplier_id");
        if (getSupplier_id().length() > 10) throw new DAException(DAResource.INVALID_LENGTH, "supplier_id"); 
        _stmt.setObject(index++, getSupplier_id(), Types.CHAR); 
      }

      if (modified[10]) { 
        if (getCreate_date() == null) _stmt.setNull(index++, Types.DATE);
        else _stmt.setObject(index++, getCreate_date(), Types.DATE); 
      }

      if (modified[11]) { 
        if (getUrl() == null) _stmt.setNull(index++, Types.VARCHAR);
        else if (getUrl().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "url"); 
        else _stmt.setObject(index++, getUrl(), Types.VARCHAR); 
      }

      if (modified[12]) { 
        if (getReadme() == null) _stmt.setNull(index++, Types.VARCHAR);
        else if (getReadme().length() > 1000) throw new DAException(DAResource.INVALID_LENGTH, "readme"); 
        else _stmt.setObject(index++, getReadme(), Types.VARCHAR); 
      }

      if (getProduct_id() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "product_id");
      if (getProduct_id().length() > 10) throw new DAException(DAResource.INVALID_LENGTH, "product_id"); 
      _stmt.setObject(index++, getProduct_id(), Types.CHAR); 

      int rowsAffected = _stmt.executeUpdate();
      if (rowsAffected == 0) throw new DAException(DAResource.METHOD_AFFCTD_NOROWS);
      if (rowsAffected > 1) throw new DAException(DAResource.METHOD_AFFCTD_MULTROWS);
      _stmt.close(); _stmt = null;

      setDataId(aDataId);

    } catch(SQLException exc) {
      throw new DAException (DAResource.ERROR_IN_METHOD,"update(dataId) ", exc);
    } finally {
      _setBusy(false);
    }

    setModified(false);
    _poSupport.fireUpdateComplete("update(dataId)", null);
  }
  

  public void update() throws DAException {

    if ( !_onBackground() && isAsynchronous() ) {
      _putOnBackgroundThread( "update()", null );
      return;
    }

    try {
      if (getCurrentDatastore() == null) throw new DAException(DAResource.NO_CONNECT_EXIST);
      if (!isModified()) throw new DAException(DAResource.NO_CHANGES_MADE);
      if (theDataId.isModified()) setAllModified();

      _stmt = getCurrentDatastore().getConnection().prepareStatement(
          generator.genUpdate(getQualifier(), modified)
        );

      int index=1; 

      if (modified[0]) { 
        if (getProduct_name() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "product_name");
        if (getProduct_name().length() > 40) throw new DAException(DAResource.INVALID_LENGTH, "product_name"); 
        _stmt.setObject(index++, getProduct_name(), Types.VARCHAR); 
      }

      if (modified[1]) { 
        if (getShort_name() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "short_name");
        if (getShort_name().length() > 10) throw new DAException(DAResource.INVALID_LENGTH, "short_name"); 
        _stmt.setObject(index++, getShort_name(), Types.CHAR); 
      }

      if (modified[2]) { 
        if (getDescription() == null) _stmt.setNull(index++, Types.VARCHAR);
        else if (getDescription().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "description"); 
        else _stmt.setObject(index++, getDescription(), Types.VARCHAR); 
      }

      if (modified[3]) { 
        if (getClassification() == null) _stmt.setNull(index++, Types.CHAR);
        else if (getClassification().length() > 10) throw new DAException(DAResource.INVALID_LENGTH, "classification"); 
        else _stmt.setObject(index++, getClassification(), Types.CHAR); 
      }

      if (modified[4]) { 
        if (getType() == null) _stmt.setNull(index++, Types.CHAR);
        else if (getType().length() > 10) throw new DAException(DAResource.INVALID_LENGTH, "type"); 
        else _stmt.setObject(index++, getType(), Types.CHAR); 
      }

      if (modified[5]) { 
        if (getPlatforms() == null) _stmt.setNull(index++, Types.VARCHAR);
        else if (getPlatforms().length() > 50) throw new DAException(DAResource.INVALID_LENGTH, "platforms"); 
        else _stmt.setObject(index++, getPlatforms(), Types.VARCHAR); 
      }

      if (modified[6]) { 
        if (getLevel() == null) _stmt.setNull(index++, Types.VARCHAR);
        else if (getLevel().length() > 20) throw new DAException(DAResource.INVALID_LENGTH, "level"); 
        else _stmt.setObject(index++, getLevel(), Types.VARCHAR); 
      }

      if (modified[7]) { 
        if (getFile() == null) _stmt.setNull(index++, Types.LONGVARBINARY);
        else _stmt.setObject(index++, getFile(), Types.LONGVARBINARY); 
      }

      if (modified[8]) { 
        if (getSize() == null) _stmt.setNull(index++, Types.INTEGER);
        else _stmt.setObject(index++, getSize(), Types.INTEGER); 
      }

      if (modified[9]) { 
        if (getSupplier_id() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "supplier_id");
        if (getSupplier_id().length() > 10) throw new DAException(DAResource.INVALID_LENGTH, "supplier_id"); 
        _stmt.setObject(index++, getSupplier_id(), Types.CHAR); 
      }

      if (modified[10]) { 
        if (getCreate_date() == null) _stmt.setNull(index++, Types.DATE);
        else _stmt.setObject(index++, getCreate_date(), Types.DATE); 
      }

      if (modified[11]) { 
        if (getUrl() == null) _stmt.setNull(index++, Types.VARCHAR);
        else if (getUrl().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "url"); 
        else _stmt.setObject(index++, getUrl(), Types.VARCHAR); 
      }

      if (modified[12]) { 
        if (getReadme() == null) _stmt.setNull(index++, Types.VARCHAR);
        else if (getReadme().length() > 1000) throw new DAException(DAResource.INVALID_LENGTH, "readme"); 
        else _stmt.setObject(index++, getReadme(), Types.VARCHAR); 
      }

      if (getProduct_id() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "product_id");
      if (getProduct_id().length() > 10) throw new DAException(DAResource.INVALID_LENGTH, "product_id"); 
      _stmt.setObject(index++, getProduct_id(), Types.CHAR); 

      int rowsAffected = _stmt.executeUpdate();
      if (rowsAffected == 0) throw new DAException(DAResource.METHOD_AFFCTD_NOROWS);
      if (rowsAffected > 1) throw new DAException(DAResource.METHOD_AFFCTD_MULTROWS);
      _stmt.close(); _stmt = null;

    } catch(SQLException exc) {
      throw new DAException (DAResource.ERROR_IN_METHOD,"update() ", exc);
    } finally {
      _setBusy(false);
    }

    setModified(false);
    _poSupport.fireUpdateComplete("update()", null);
  }
  
  /**
    * This method is user defined.
    */
  public static void deleteAllProducts(Integer numrows[]) throws DAException { 

    try { 
      if (_getStaticDatastore() == null) throw new DAException(DAResource.NO_CONNECT_EXIST); 

      CallableStatement stmt = _getStaticDatastore().getConnection().prepareCall(
          "{ call DELETE_ALL_AM_PROD(?) }"
        ); 
      ((CallableStatement)stmt).registerOutParameter(1, Types.INTEGER); 

      // put parameters into statement 
      int rowsAffected = stmt.executeUpdate(); 
      numrows[0] = new Integer(((CallableStatement)stmt).getInt(1));
      if (((CallableStatement)stmt).wasNull()) numrows[0] = null; 

      stmt.close(); stmt = null;
    }
    catch(SQLException exc) {
      throw new DAException (DAResource.ERROR_IN_METHOD,"deleteAllProducts(Integer[]) ", exc);
    } 
  } 

  /**
    * This method is user defined.
    */
  public static void deleteProduct(String product_id, Integer numrows[]) throws DAException { 

    try { 
      if (_getStaticDatastore() == null) throw new DAException(DAResource.NO_CONNECT_EXIST); 

      CallableStatement stmt = _getStaticDatastore().getConnection().prepareCall(
          "{ call DELETE_AM_PRODUCT(?,?) }"
        ); 
      ((CallableStatement)stmt).registerOutParameter(2, Types.INTEGER); 

      // put parameters into statement 
      if (product_id == null) stmt.setNull(1, Types.VARCHAR);
      else stmt.setObject(1, product_id, Types.VARCHAR); 

      int rowsAffected = stmt.executeUpdate(); 
      numrows[0] = new Integer(((CallableStatement)stmt).getInt(2));
      if (((CallableStatement)stmt).wasNull()) numrows[0] = null; 

      stmt.close(); stmt = null;
    }
    catch(SQLException exc) {
      throw new DAException (DAResource.ERROR_IN_METHOD,"deleteProduct(String, Integer[]) ", exc);
    } 
  } 

  /**
    * This method is user defined.
    */
  public static String[] getProducts(String productList[]) throws DAException { //: Nix added String[] return type

    try { 
      if (_getStaticDatastore() == null) throw new DAException(DAResource.NO_CONNECT_EXIST); 

      CallableStatement stmt = _getStaticDatastore().getConnection().prepareCall(
          "{ call GET_AM_ID_AND_NAME(?) }"
        ); 
      ((CallableStatement)stmt).registerOutParameter(1, Types.VARCHAR); 

      // put parameters into statement 
      int rowsAffected = stmt.executeUpdate(); 
      productList[0] = ((CallableStatement)stmt).getString(1); 
      if (((CallableStatement)stmt).wasNull()) productList[0] = null; 

      stmt.close(); stmt = null;
    }
    catch(SQLException exc) {
      throw new DAException (DAResource.ERROR_IN_METHOD,"getProducts(String[]) ", exc);
    } 
    return productList ;   //: Nix added line
  } 

  /**
    * This method is user defined.
    */
  public static String[] getProduct(String product_id, String productInfo[]) throws DAException {   //: Nix added String[] return type

    try { 
      if (_getStaticDatastore() == null) throw new DAException(DAResource.NO_CONNECT_EXIST); 

      CallableStatement stmt = _getStaticDatastore().getConnection().prepareCall(
          "{ call GET_AM_PRODUCT(?,?) }"
        ); 
      ((CallableStatement)stmt).registerOutParameter(2, Types.VARCHAR); 

      // put parameters into statement 
      if (product_id == null) stmt.setNull(1, Types.VARCHAR);
      else stmt.setObject(1, product_id, Types.VARCHAR); 

      int rowsAffected = stmt.executeUpdate(); 
      productInfo[0] = ((CallableStatement)stmt).getString(2); 
      if (((CallableStatement)stmt).wasNull()) productInfo[0] = null; 

      stmt.close(); stmt = null;
    }
    catch(SQLException exc) {
      throw new DAException (DAResource.ERROR_IN_METHOD,"getProduct(String, String[]) ", exc);
    } 
    return productInfo ;  //: Nix added line
  } 

  /**
    * This method is user defined.
    */
  public static void insertProduct(String product_id, String product_name, String short_name, String description, String supplier_id, String url, Integer numrows[]) throws DAException { 

    try { 
      if (_getStaticDatastore() == null) throw new DAException(DAResource.NO_CONNECT_EXIST); 

      CallableStatement stmt = _getStaticDatastore().getConnection().prepareCall(
          "{ call INSERT_AM_PRODUCT(?,?,?,?,?,?,?) }"
        ); 
      ((CallableStatement)stmt).registerOutParameter(7, Types.INTEGER); 

      // put parameters into statement 
      if (product_id == null) stmt.setNull(1, Types.VARCHAR);
      else stmt.setObject(1, product_id, Types.VARCHAR); 

      if (product_name == null) stmt.setNull(2, Types.VARCHAR);
      else stmt.setObject(2, product_name, Types.VARCHAR); 

      if (short_name == null) stmt.setNull(3, Types.VARCHAR);
      else stmt.setObject(3, short_name, Types.VARCHAR); 

      if (description == null) stmt.setNull(4, Types.VARCHAR);
      else stmt.setObject(4, description, Types.VARCHAR); 

      if (supplier_id == null) stmt.setNull(5, Types.VARCHAR);
      else stmt.setObject(5, supplier_id, Types.VARCHAR); 

      if (url == null) stmt.setNull(6, Types.VARCHAR);
      else stmt.setObject(6, url, Types.VARCHAR); 

      int rowsAffected = stmt.executeUpdate(); 
      numrows[0] = new Integer(((CallableStatement)stmt).getInt(7));
      if (((CallableStatement)stmt).wasNull()) numrows[0] = null; 

      stmt.close(); stmt = null;
    }
    catch(SQLException exc) {
      throw new DAException (DAResource.ERROR_IN_METHOD,"insertProduct(String, String, String, String, String, String, Integer[]) ", exc);
    } 
  } 

  /**
    * This method is user defined.
    */
  public static void updateProduct(String product_id, String product_name, String short_name, String description, String supplier_id, String url, Integer numrows[]) throws DAException { 

    try { 
      if (_getStaticDatastore() == null) throw new DAException(DAResource.NO_CONNECT_EXIST); 

      CallableStatement stmt = _getStaticDatastore().getConnection().prepareCall(
          "{ call UPDATE_AM_PRODUCT(?,?,?,?,?,?,?) }"
        ); 
      ((CallableStatement)stmt).registerOutParameter(7, Types.INTEGER); 

      // put parameters into statement 
      if (product_id == null) stmt.setNull(1, Types.VARCHAR);
      else stmt.setObject(1, product_id, Types.VARCHAR); 

      if (product_name == null) stmt.setNull(2, Types.VARCHAR);
      else stmt.setObject(2, product_name, Types.VARCHAR); 

      if (short_name == null) stmt.setNull(3, Types.VARCHAR);
      else stmt.setObject(3, short_name, Types.VARCHAR); 

      if (description == null) stmt.setNull(4, Types.VARCHAR);
      else stmt.setObject(4, description, Types.VARCHAR); 

      if (supplier_id == null) stmt.setNull(5, Types.VARCHAR);
      else stmt.setObject(5, supplier_id, Types.VARCHAR); 

      if (url == null) stmt.setNull(6, Types.VARCHAR);
      else stmt.setObject(6, url, Types.VARCHAR); 

      int rowsAffected = stmt.executeUpdate(); 
      numrows[0] = new Integer(((CallableStatement)stmt).getInt(7));
      if (((CallableStatement)stmt).wasNull()) numrows[0] = null; 

      stmt.close(); stmt = null;
    }
    catch(SQLException exc) {
      throw new DAException (DAResource.ERROR_IN_METHOD,"updateProduct(String, String, String, String, String, String, Integer[]) ", exc);
    } 
  } 

  public void _executeAction( String _methodName, Object[] _params ) throws Exception { 
    if ( _methodName.equals("update(dataId)") ) {
      update( (IsvappsDataId)_params[0] );
    } 
    else if ( _methodName.equals("update()") ) {
      update();
    } 

  }

  public boolean isModified() {
    return super.isModified() || theDataId.isModified();
  }

  public void setModified(boolean enable) {
    if ( !enable ) { 
      theDataId.setModified(false); 
      for(int i=0; i < modified.length; i++) modified[i] = false;
    }

    super.setModified(enable);
  }

  protected void _setBusy(boolean flag) { super._setBusy(flag); }
  protected POCompleteSupport _getPOCompleteSupport() { return _poSupport; }
  public String[] getAttributeStrings() {
    String[] s = {getProduct_id(),
            getProduct_name(),
            getShort_name(),
            getDescription(),
            getClassification(),
            getType(),
            getPlatforms(),
            getLevel(),
            String.valueOf(getFile()),
            String.valueOf(getSize()),
            getSupplier_id(),
            String.valueOf(getCreate_date()),
            getUrl(),
            getReadme() };
    return (s);
  }

  public Object[] getAttributes() {
    Object[] o = {getProduct_id(),
            getProduct_name(),
            getShort_name(),
            getDescription(),
            getClassification(),
            getType(),
            getPlatforms(),
            getLevel(),
            getFile(),
            getSize(),
            getSupplier_id(),
            getCreate_date(),
            getUrl(),
            getReadme() };
    return (o);
  }

  boolean modified[] = { false, false, false, false, false, false, false, false, false, false, false, false, false };

  void setAllModified() {
    for(int i=0; i < modified.length; i++) modified[i] = true;
  }

  static DASQLGenerator generator = new DASQLGenerator("ISVAPPSRMI",
                                                      new String[] {"product_id"}, 
                                                      new String[] {"product_name",
                                                       "short_name",
                                                       "description",
                                                       "classification",
                                                       "type",
                                                       "platforms",
                                                       "level",
                                                       "file",
                                                       "size",
                                                       "supplier_id",
                                                       "create_date",
                                                       "url",
                                                       "readme"}, 
                                                      new String[] {"product_id"}, 
                                                      null );

};
