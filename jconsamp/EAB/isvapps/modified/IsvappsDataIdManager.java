//---------------------------------------------------------------------------
// This code is generated by IBM VisualAge for Java Data Access Builder.
// WARNING: User modifications will be lost on next code generation.
//---------------------------------------------------------------------------

package Isvapps;

import java.lang.*;
import java.math.*;
import java.util.*;
import java.sql.*;
import COM.ibm.ivj.eab.data.*;
import COM.ibm.ivj.javabeans.*;
import java.awt.*;

//----------------------------------------------------------------
//
//  IsvappsDataIdManager
//
//----------------------------------------------------------------

public class IsvappsDataIdManager extends DAManager 
{
  public static String getSQLBaseQuery() { return "SELECT T1.PRODUCT_ID" +
"           FROM " + Isvapps.getQualifier() + "ISVAPPS T1 "; }

 //----------------------------------------------------------------
 // Constructors
 //----------------------------------------------------------------
  public IsvappsDataIdManager() {}
  public IsvappsDataIdManager(DatastoreJDBC aDatastore) {
    super(aDatastore);
  }

 //----------------------------------------------------------------
 // Database access methods
 //----------------------------------------------------------------

  public void select(String sqlSuffix) throws DAException {

    if ( !_onBackground() && isAsynchronous() ) {
      Object[] params = { sqlSuffix };
      _putOnBackgroundThread( "select(String)", params );
      return;
    }

    try {
      if (getCurrentDatastore() == null) throw new DAException(DAResource.NO_CONNECT_EXIST);
      if (isOpen()) close();
      if (sqlSuffix == null) sqlSuffix = "";

      _stmt = getCurrentDatastore().getConnection().prepareStatement(getSQLBaseQuery() + sqlSuffix); 

      _setStmtOptions();
      _rs = _stmt.executeQuery();
      _map = new IsvappsDataIdMap();
      _fillInternalSequence();
      _dbclose();

    } catch(SQLException exc) {
      throw new DAException (DAResource.SELECT_FAILED, exc);
    } finally {
      _setBusy(false);
    }

    _managerSupport.fireSelectComplete("select(String)");
  }

  public void open(String sqlSuffix) throws DAException {

    if ( !_onBackground() && isAsynchronous() ) {
      Object[] params = { sqlSuffix };
      _putOnBackgroundThread( "open(String)", params );
      return;
    }

    try {
      if (getCurrentDatastore() == null) throw new DAException(DAResource.NO_CONNECT_EXIST);
      if (isOpen()) close();
      if (sqlSuffix == null) sqlSuffix = "";

      _stmt = getCurrentDatastore().getConnection().prepareStatement(getSQLBaseQuery() + sqlSuffix); 

      _setStmtOptions();
      _rs = _stmt.executeQuery();
      _map = new IsvappsDataIdMap();
      _setOpen(true);

    } catch(SQLException exc) {
      throw new DAException(DAResource.OPEN_FAILED, exc);
    } finally {
      _setBusy(false);
    }

    _managerSupport.fireOpenComplete("open(String)");
  } 

  public void deleteFetched() throws DAException {

    if ( !_onBackground() && isAsynchronous() ) {
      _putOnBackgroundThread( "deleteFetched()", null );
      return;
    }

    try {
      if (!isOpen()) throw new DAException(DAResource.CURSOR_NOT_OPEN);
      if (!isFetched()) throw new DAException(DAResource.ROW_NOT_FETCHED);

      PreparedStatement deleteStmt = getCurrentDatastore().getConnection().prepareStatement(
          "DELETE FROM " + Isvapps.getQualifier() + "ISVAPPS WHERE CURRENT OF " + _rs.getCursorName()
        );

      deleteStmt.executeUpdate();
      deleteStmt.close();

    } catch(SQLException exc) {
      throw new DAException(DAResource.ERROR_IN_METHOD, "deleteFetched() ", exc);
    } finally {
      _setBusy(false);
    }

    _setFetched(false);
    element().setModified(false);
    _managerSupport.fireDeleteFetchedComplete();
  }

  public void updateFetched() throws DAException {

    if ( !_onBackground() && isAsynchronous() ) {
      _putOnBackgroundThread( "updateFetched()", null );
      return;
    }

    IsvappsDataId obj = element();

    try {
      if (!isOpen()) throw new DAException(DAResource.CURSOR_NOT_OPEN);
      if (!isFetched()) throw new DAException(DAResource.ROW_NOT_FETCHED);
      if (!obj.isModified()) throw new DAException(DAResource.NO_CHANGES_MADE); 

      PreparedStatement updateStmt = getCurrentDatastore().getConnection().prepareStatement(
          Isvapps.generator.genUpdateDataIdFetched(Isvapps.getQualifier(), obj.modified) + _rs.getCursorName()
        );

      int index=1; 

      if (obj.modified[0]) { 
        if (obj.getProduct_id() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "product_id");
        if (obj.getProduct_id().length() > 10) throw new DAException(DAResource.INVALID_LENGTH, "product_id"); 
        updateStmt.setObject(index++, obj.getProduct_id(), Types.CHAR); 
      }

      updateStmt.executeUpdate();
      updateStmt.close();

    } catch(SQLException exc) {
      throw new DAException(DAResource.ERROR_IN_METHOD, "updateFetched() ", exc);
    } finally {
      _setBusy(false);
    }

    obj.setModified(false);
    _managerSupport.fireUpdateFetchedComplete();
  } 

  public IsvappsDataId element() { return (IsvappsDataId)_cachedObject; }
  protected DataAccessObject newElement() { return new IsvappsDataId(); }


  public DatastoreJDBC getCurrentDatastore() {
    if (getObjectsDatastore() != null) return getObjectsDatastore();
    else if (Isvapps.getDefaultDatastore() != null) return Isvapps.getDefaultDatastore();
    else return DatastoreJDBC.getApplicationDatastore();
  }

  protected void firePropertyChange(String property, Object oldValue, Object newValue) {
    super.firePropertyChange(property, oldValue, newValue);
  }

  protected void _setBusy(boolean flag) { super._setBusy(flag); }

  ManagerCompleteSupport _getManagerSupport() { return _managerSupport; }

  public void _executeAction( String _methodName, Object[] _params ) throws Exception { 

    if ( _methodName.equals("deleteFetched()") ) {
      deleteFetched();
    }
    else if ( _methodName.equals("updateFetched()") ) {
      updateFetched();
    } 
    else
      super._executeAction(_methodName,_params); 

  }

}

//-----------------------------------------------------------------------------------
// The following class(es) are used to _map a result set into a IsvappsDataId
//-----------------------------------------------------------------------------------
class IsvappsDataIdMap implements DAMap
{
  public void putResultSetInto(DataAccessObject obj, ResultSet rs, boolean saveStream) throws DAException, SQLException {
    IsvappsDataId theObj = (IsvappsDataId)obj;

    theObj._setProduct_id(rs.getString(1));
    if (rs.wasNull()) theObj._setProduct_id(null);

  }
} 
