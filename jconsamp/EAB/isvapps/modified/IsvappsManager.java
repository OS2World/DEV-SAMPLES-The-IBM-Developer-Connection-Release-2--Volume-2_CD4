//---------------------------------------------------------------------------
// This code is generated by IBM VisualAge for Java Data Access Builder.
// WARNING: User modifications will be lost on next code generation.
//---------------------------------------------------------------------------

package Isvapps;

import java.lang.*;
import java.math.*;
import java.util.*;
import java.sql.*;
import COM.ibm.ivj.eab.data.*;
import COM.ibm.ivj.javabeans.*;
import java.awt.*;

//----------------------------------------------------------------
//
//  IsvappsManager
//
//----------------------------------------------------------------

public class IsvappsManager extends DAManager 
{
  public static String getSQLBaseQuery() { return "SELECT T1.PRODUCT_ID," +
"                   T1.PRODUCT_NAME, " +
"                   T1.SHORT_NAME, " +
"                   T1.DESCRIPTION, " +
"                   T1.CLASSIFICATION, " +
"                   T1.TYPE, " +
"                   T1.PLATFORMS, " +
"                   T1.LEVEL, " +
"                   T1.FILE, " +
"                   T1.SIZE, " +
"                   T1.SUPPLIER_ID, " +
"                   T1.CREATE_DATE, " +
"                   T1.URL, " +
"                   T1.README" +
"           FROM " + Isvapps.getQualifier() + "ISVAPPS T1 "; }

 //----------------------------------------------------------------
 // Constructors
 //----------------------------------------------------------------
  public IsvappsManager() {}
  public IsvappsManager(DatastoreJDBC aDatastore) {
    super(aDatastore);
  }

 //----------------------------------------------------------------
 // Database access methods
 //----------------------------------------------------------------

  public void select(String sqlSuffix) throws DAException {

    if ( !_onBackground() && isAsynchronous() ) {
      Object[] params = { sqlSuffix };
      _putOnBackgroundThread( "select(String)", params );
      return;
    }

    try {
      if (getCurrentDatastore() == null) throw new DAException(DAResource.NO_CONNECT_EXIST);
      if (isOpen()) close();
      if (sqlSuffix == null) sqlSuffix = "";

      _stmt = getCurrentDatastore().getConnection().prepareStatement(getSQLBaseQuery() + sqlSuffix); 

      _setStmtOptions();
      _rs = _stmt.executeQuery();
      _map = new IsvappsMap();
      _fillInternalSequence();
      _dbclose();

    } catch(SQLException exc) {
      throw new DAException (DAResource.SELECT_FAILED, exc);
    } finally {
      _setBusy(false);
    }

    _managerSupport.fireSelectComplete("select(String)");
  }

  public void open(String sqlSuffix) throws DAException {

    if ( !_onBackground() && isAsynchronous() ) {
      Object[] params = { sqlSuffix };
      _putOnBackgroundThread( "open(String)", params );
      return;
    }

    try {
      if (getCurrentDatastore() == null) throw new DAException(DAResource.NO_CONNECT_EXIST);
      if (isOpen()) close();
      if (sqlSuffix == null) sqlSuffix = "";

      _stmt = getCurrentDatastore().getConnection().prepareStatement(getSQLBaseQuery() + sqlSuffix); 

      _setStmtOptions();
      _rs = _stmt.executeQuery();
      _map = new IsvappsMap();
      _setOpen(true);

    } catch(SQLException exc) {
      throw new DAException(DAResource.OPEN_FAILED, exc);
    } finally {
      _setBusy(false);
    }

    _managerSupport.fireOpenComplete("open(String)");
  } 

  public void deleteFetched() throws DAException {

    if ( !_onBackground() && isAsynchronous() ) {
      _putOnBackgroundThread( "deleteFetched()", null );
      return;
    }

    try {
      if (!isOpen()) throw new DAException(DAResource.CURSOR_NOT_OPEN);
      if (!isFetched()) throw new DAException(DAResource.ROW_NOT_FETCHED);

      PreparedStatement deleteStmt = getCurrentDatastore().getConnection().prepareStatement(
          "DELETE FROM " + Isvapps.getQualifier() + "ISVAPPS WHERE CURRENT OF " + _rs.getCursorName()
        );

      deleteStmt.executeUpdate();
      deleteStmt.close();

    } catch(SQLException exc) {
      throw new DAException(DAResource.ERROR_IN_METHOD, "deleteFetched() ", exc);
    } finally {
      _setBusy(false);
    }

    _setFetched(false);
    element().setModified(false);
    _managerSupport.fireDeleteFetchedComplete();
  }

  public void updateFetched() throws DAException {

    if ( !_onBackground() && isAsynchronous() ) {
      _putOnBackgroundThread( "updateFetched()", null );
      return;
    }

    Isvapps obj = element();

    try {
      if (!isOpen()) throw new DAException(DAResource.CURSOR_NOT_OPEN);
      if (!isFetched()) throw new DAException(DAResource.ROW_NOT_FETCHED);
      if (!obj.isModified()) throw new DAException(DAResource.NO_CHANGES_MADE); 

      PreparedStatement updateStmt = getCurrentDatastore().getConnection().prepareStatement(
          Isvapps.generator.genUpdateFetched(Isvapps.getQualifier(),
              obj.getDataId().modified, obj.modified) + _rs.getCursorName()
        );

      int index=1; 

      if (obj.getDataId().modified[0]) { 
        if (obj.getProduct_id() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "product_id");
        if (obj.getProduct_id().length() > 10) throw new DAException(DAResource.INVALID_LENGTH, "product_id"); 
        updateStmt.setObject(index++, obj.getProduct_id(), Types.CHAR); 
      }

      if (obj.modified[0]) { 
        if (obj.getProduct_name() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "product_name");
        if (obj.getProduct_name().length() > 40) throw new DAException(DAResource.INVALID_LENGTH, "product_name"); 
        updateStmt.setObject(index++, obj.getProduct_name(), Types.VARCHAR); 
      }

      if (obj.modified[1]) { 
        if (obj.getShort_name() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "short_name");
        if (obj.getShort_name().length() > 10) throw new DAException(DAResource.INVALID_LENGTH, "short_name"); 
        updateStmt.setObject(index++, obj.getShort_name(), Types.CHAR); 
      }

      if (obj.modified[2]) { 
        if (obj.getDescription() == null) updateStmt.setNull(index++, Types.VARCHAR);
        else if (obj.getDescription().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "description"); 
        else updateStmt.setObject(index++, obj.getDescription(), Types.VARCHAR); 
      }

      if (obj.modified[3]) { 
        if (obj.getClassification() == null) updateStmt.setNull(index++, Types.CHAR);
        else if (obj.getClassification().length() > 10) throw new DAException(DAResource.INVALID_LENGTH, "classification"); 
        else updateStmt.setObject(index++, obj.getClassification(), Types.CHAR); 
      }

      if (obj.modified[4]) { 
        if (obj.getType() == null) updateStmt.setNull(index++, Types.CHAR);
        else if (obj.getType().length() > 10) throw new DAException(DAResource.INVALID_LENGTH, "type"); 
        else updateStmt.setObject(index++, obj.getType(), Types.CHAR); 
      }

      if (obj.modified[5]) { 
        if (obj.getPlatforms() == null) updateStmt.setNull(index++, Types.VARCHAR);
        else if (obj.getPlatforms().length() > 50) throw new DAException(DAResource.INVALID_LENGTH, "platforms"); 
        else updateStmt.setObject(index++, obj.getPlatforms(), Types.VARCHAR); 
      }

      if (obj.modified[6]) { 
        if (obj.getLevel() == null) updateStmt.setNull(index++, Types.VARCHAR);
        else if (obj.getLevel().length() > 20) throw new DAException(DAResource.INVALID_LENGTH, "level"); 
        else updateStmt.setObject(index++, obj.getLevel(), Types.VARCHAR); 
      }

      if (obj.modified[7]) { 
        if (obj.getFile() == null) updateStmt.setNull(index++, Types.LONGVARBINARY);
        else updateStmt.setObject(index++, obj.getFile(), Types.LONGVARBINARY); 
      }

      if (obj.modified[8]) { 
        if (obj.getSize() == null) updateStmt.setNull(index++, Types.INTEGER);
        else updateStmt.setObject(index++, obj.getSize(), Types.INTEGER); 
      }

      if (obj.modified[9]) { 
        if (obj.getSupplier_id() == null) throw new DAException(DAResource.COLUMN_NOT_NULLABLE, "supplier_id");
        if (obj.getSupplier_id().length() > 10) throw new DAException(DAResource.INVALID_LENGTH, "supplier_id"); 
        updateStmt.setObject(index++, obj.getSupplier_id(), Types.CHAR); 
      }

      if (obj.modified[10]) { 
        if (obj.getCreate_date() == null) updateStmt.setNull(index++, Types.DATE);
        else updateStmt.setObject(index++, obj.getCreate_date(), Types.DATE); 
      }

      if (obj.modified[11]) { 
        if (obj.getUrl() == null) updateStmt.setNull(index++, Types.VARCHAR);
        else if (obj.getUrl().length() > 80) throw new DAException(DAResource.INVALID_LENGTH, "url"); 
        else updateStmt.setObject(index++, obj.getUrl(), Types.VARCHAR); 
      }

      if (obj.modified[12]) { 
        if (obj.getReadme() == null) updateStmt.setNull(index++, Types.VARCHAR);
        else if (obj.getReadme().length() > 1000) throw new DAException(DAResource.INVALID_LENGTH, "readme"); 
        else updateStmt.setObject(index++, obj.getReadme(), Types.VARCHAR); 
      }

      updateStmt.executeUpdate();
      updateStmt.close();

    } catch(SQLException exc) {
      throw new DAException(DAResource.ERROR_IN_METHOD, "updateFetched() ", exc);
    } finally {
      _setBusy(false);
    }

    obj.setModified(false);
    _managerSupport.fireUpdateFetchedComplete();
  } 

  public Isvapps element() { return (Isvapps)_cachedObject; }
  protected DataAccessObject newElement() { return new Isvapps(); }

  protected final DataAccessObject _newElement() {
    DataAccessObject newObject = newElement();
    ((Isvapps)newObject).setObjectsDatastore(getObjectsDatastore());
    return newObject;
  }

  public void setObjectsDatastore(DatastoreJDBC aDatastore) {
    super.setObjectsDatastore(aDatastore);
    ((Isvapps)_cachedObject).setObjectsDatastore(aDatastore);
  }


  public DatastoreJDBC getCurrentDatastore() {
    if (getObjectsDatastore() != null) return getObjectsDatastore();
    else if (Isvapps.getDefaultDatastore() != null) return Isvapps.getDefaultDatastore();
    else return DatastoreJDBC.getApplicationDatastore();
  }

  protected void firePropertyChange(String property, Object oldValue, Object newValue) {
    super.firePropertyChange(property, oldValue, newValue);
  }

  protected void _setBusy(boolean flag) { super._setBusy(flag); }

  ManagerCompleteSupport _getManagerSupport() { return _managerSupport; }

  public void _executeAction( String _methodName, Object[] _params ) throws Exception { 

    if ( _methodName.equals("deleteFetched()") ) {
      deleteFetched();
    }
    else if ( _methodName.equals("updateFetched()") ) {
      updateFetched();
    } 
    else
      super._executeAction(_methodName,_params); 

  }

}

//-----------------------------------------------------------------------------------
// The following class(es) are used to _map a result set into a Isvapps
//-----------------------------------------------------------------------------------
class IsvappsMap implements DAMap
{
  public void putResultSetInto(DataAccessObject obj, ResultSet rs, boolean saveStream) throws DAException, SQLException {
    Isvapps theObj = (Isvapps)obj;

    theObj._setProduct_id(rs.getString(1));
    if (rs.wasNull()) theObj._setProduct_id(null);
    theObj._setProduct_name(rs.getString(2));
    if (rs.wasNull()) theObj._setProduct_name(null);
    theObj._setShort_name(rs.getString(3));
    if (rs.wasNull()) theObj._setShort_name(null);
    theObj._setDescription(rs.getString(4));
    if (rs.wasNull()) theObj._setDescription(null);
    theObj._setClassification(rs.getString(5));
    if (rs.wasNull()) theObj._setClassification(null);
    theObj._setType(rs.getString(6));
    if (rs.wasNull()) theObj._setType(null);
    theObj._setPlatforms(rs.getString(7));
    if (rs.wasNull()) theObj._setPlatforms(null);
    theObj._setLevel(rs.getString(8));
    if (rs.wasNull()) theObj._setLevel(null);
    theObj._setFile(rs.getBytes(9));
    if (rs.wasNull()) theObj._setFile(null);
    theObj._setSize(new Integer(rs.getInt(10)));
    if (rs.wasNull()) theObj._setSize(null);
    theObj._setSupplier_id(rs.getString(11));
    if (rs.wasNull()) theObj._setSupplier_id(null);
    theObj._setCreate_date(rs.getDate(12));
    if (rs.wasNull()) theObj._setCreate_date(null);
    theObj._setUrl(rs.getString(13));
    if (rs.wasNull()) theObj._setUrl(null);
    theObj._setReadme(rs.getString(14));
    if (rs.wasNull()) theObj._setReadme(null);

  }
} 
