<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 3.2//EN">
<html>
<head>
<title>Footnotes for "CGI Made Really Easy"</title>
</head>

<body bgcolor="#FFF8E8" link="#0000FF" vlink="#007090" alink="#00A0FF">

<a name="top"></a>
<h1>
<a href="http://www.eff.org/blueribbon.html"><img 
   border=0 src="/images/blueribbon.gif"
   height=30 width=18 alt="Blue Ribbon Campaign for Free Speech"></a>
Footnotes for "CGI Made Really Easy"
</h1>

<table width="100%">
<tr><td><a href="">Back to Main Page</a></td>
    <td align=right><a href="/easy/">Go to Other Tutorials</a></td></tr>
</table>

<hr>

<ol>
<li><a href="#samples">Sample CGI Programs</a>
<li><a href="#mailer">CGI Mailer Script</a>
<li><a href="#security">Security with CGI Scripts</a>
<li><a href="#placing">Placing Your Script on the Server</a>
<li><a href="#location">Sending an Existing File Back as a Response</a>
<li><a href="#otherenv">Other Useful CGI Environment Variables</a>
<li><a href="#othertypes">Returning an Image or Other Non-HTML Response 
    from a CGI Script</a>
<li><a href="#getvspost">What is the difference between GET and POST?</a>
<li><a href="#nph">Gaining More Control, with Non-Parsed Header Scripts</a>
</ol>


<p><hr><p>

<a name="samples"></a>
<h2>Sample CGI Programs</h2>

<p>By request, here are some "hello, world" CGI programs to get you
started.  The simple version demonstrates CGI output only, and the
longer (such as it is) version will echo back any input fields you
pass to it.  Both Perl and C versions are provided, with source.

<ul>
<li>The output-only script:
    <ul>
    <li>Perl version: <a href="hello_s.pl.cgi">run it</a>, or
        <a href="hello_s.pl.txt">view the source</a>.
    <li>C version: <a href="hello_s.c.cgi">run it</a>, or
        <a href="hello_s.c.txt">view the source</a>.
    </ul>
<li>The input-echoing script, called with two input fields.  Look at the URL
listed in your browser after you run the scripts.  Modify the last part of
the URL and see what happens:
    <ul>
    <li>Perl version: <a href="hello.pl.cgi?home=San+Francisco&favorite+flavor=chocolate">run it</a>, or
        <a href="hello.pl.txt">view the source</a>.
    <li>C version: <a href="hello.c.cgi?home=San+Francisco&favorite+flavor=chocolate">run it</a>, or
        <a href="hello.c.txt">view the source</a>.
    </ul>
</ul>

<p><a href="#top">Back to top of page</a>

<p><hr><p>

<a name="mailer"></a>
<h2>CGI Mailer Script</h2>

<p>One of the most common uses of a CGI script is to mail form data to
an email address.  So here's a simple script that does just that, written 
in Perl, called <a href="mailer.pl.txt">mailer.pl</a>.

<p>Make these changes to the script before putting it in place:
<ul>
<li>Make sure the path to your server's perl program is correct, in the
    first line.  You can usually find this with the Unix command 
    "<tt>which perl</tt>".
<li>Change the two variables <b>$mailprog</b> and <b>$recipient</b> to
    match your server's mailing program, and your email address, respectively.
<li>... surely you can come up with more imaginative HTML output than I did.
</ul>

<h3>Mailing Form Data Without CGI</h3>

<p>There's a poor-man's way of mailing form data that uses just HTML:
in the <b>&lt;form&gt;</b> tag, set the <b>action</b> to a "mailto:" URL,
and the <b>enctype</b> attribute to "text/plain".  Most browsers
handle it correctly, i.e. send the form data in a mail message.
For example, 

<blockquote><pre>
&lt;form action="mailto:me@myhost.com" enctype="text/plain"&gt;
</pre></blockquote>

<p>There are disadvantages:  you can't control the format of
the mailed text, and you can't send a response back to the user.  
Also, not all browsers support this style of the <b>&lt;form&gt;</b> tag.

<p><a href="#top">Back to top of page</a>


<p><hr><p>

<a name="security"></a>
<h2>Security with CGI Scripts</h2>

<p>Think about it-- a CGI script is a program that anyone in the world
can run <i>on your machine</i>.  Accordingly, look out for security holes
as you write your script.

<p>Mostly, <b>don't trust the user input</b>.  In particular, don't put 
user data in a shell command without verifying the data carefully,
lest a hacker drive a virtual truck through this security hole.  

<p>Let's say you have a CGI program that lets users run "finger"
on your host.  Such a Perl script might have a line like
<blockquote><pre>
system "finger $username" ;
</pre></blockquote>

<p>But if a malicious user enters "<tt>james; rm -r /</tt>" as the username, 
your program runs
<blockquote><pre>
system "finger james; rm -r /" ;
</pre></blockquote>
which erases as many of your files as possible, probably not what you
intended.  So verify that the username is valid, with something like
<blockquote><pre>
$username!~ /[^\w.-]/   || die "Whoa!  Nice try, buddy." ;
</pre></blockquote>

or use a different form of the <tt>system</tt> command:
<blockquote><pre>
system("finger", $username) ;
</pre></blockquote>

or come up with another way to solve the problem.


<p>It's easy for a hacker to send <i>any</i> form variables to your script, 
with any values (even non-printable characters).  Your security shouldn't 
rely on fields having certain values, or even existing or not existing.

<p><a href="#top">Back to top of page</a>


<p><hr><p>

<a name="placing"></a>
<h2>Placing Your Script on the Server</h2>

<p>Different Web servers are configured differently.  Some let you 
put your CGI scripts in the same directory as your Web pages, and their
filenames should end in ".cgi".  Other servers make you put all CGI scripts in
a specific directory, usually called "cgi-bin".  Your webmaster has the
final answers.

<p>You need to set the right permissions on the program file.  In Unix,
the Web server (like any process) runs under some username.  Your 
CGI program must be executable by that username, plus readable if it's a 
Perl or shell script.  In Unix, set the correct permissions with 
"<tt>chmod 750 *.cgi</tt>" (or "<tt>chmod 755 *.cgi</tt>", if your 
server doesn't have group access to your files-- try both, or ask your 
webmaster).

<p>If your script doesn't run:
<ul>
<li>For perl scripts, check the syntax with "<tt>perl -cw myscript.cgi</tt>".
<li>Make sure the path to the perl (or shell) interpreter is correct, in the
    first line of the script.  For example, find the perl interpreter with 
    the Unix command "<tt>which perl</tt>".
<li>Of course, make sure your HTML file calls the correct URL of the script,
    either relative or absolute.
<li>For clues, run the script from the command line and see how it fails.  
    This doesn't always get far, because the CGI environment variables aren't
    set correctly.  Get farther by tweaking a test copy of your source code.
</ul>

<p><a href="#top">Back to top of page</a>


<p><hr><p>

<a name="location"></a>
<h2>Sending an Existing File Back as a Response</h2>

<p>If your HTML response is always the same, or if you want to respond with
one of several existing files, you may find the "Location:" response header 
useful.  Use it to redirect the browser to another URL.

<p>By way of example, if your CGI script prints the following line to STDOUT:

<blockquote><tt>Location: response.html</tt></blockquote>

followed by a blank line, then the remote browser will retrieve
<tt>response.html</tt> and act like it's the response from your CGI script.
You can redirect the browser like this to either a relative or absolute URL.

<p>In this situation, do <b>not</b> print the "<tt>Content-type:</tt>" 
response header.

<p><a href="#top">Back to top of page</a>


<p><hr><p>

<a name="otherenv"></a>
<h2>Other Useful CGI Environment Variables</h2>

<p>CGI scripts have access to 20 or so environment variables, such as
QUERY_STRING and CONTENT_LENGTH mentioned on the main page.
Here's the 
<a href="http://hoohoo.ncsa.uiuc.edu/cgi/env.html">complete list</a> 
at NCSA.

<p>A few others you may find handy:

<dl>
<p><dt><b>REQUEST_METHOD</b>
<dd>The HTTP method this script was called with.  Generally "GET", "POST",
    or "HEAD".
<p><dt><b>HTTP_REFERER</b>
<dd>The URL of the form that was submitted.  This isn't always set,
    so don't rely on it.  Don't go invading people's privacy with it,
    neither.
<p><dt><b>PATH_INFO</b>
<dd>Extra "path" information.  It's possible to pass extra info to your
    script in the URL, after the filename of the CGI script.  For example, 
    calling the URL
    <blockquote><pre>http://www.myhost.com/mypath/myscript.cgi/path/info/here</pre></blockquote>
    will set PATH_INFO to "<tt>/path/info/here</tt>".  Commonly used for 
    path-like data, but you can use it for anything.
<p><dt><b>SERVER_NAME</b>
<dd>Your Web server's hostname or IP address.
<dt><b>SERVER_PORT</b>
<dd>Your Web server's port (at least for this request).
<dt><b>SCRIPT_NAME</b>
<dd>The local URL of the script being executed.  The CGI standard is unclear
    on whether the leading slash is included.  You can support both cases
    with this line of Perl, which guarantees "no leading slash":
    <br><tt>$ENV{'SCRIPT_NAME'}=~ s#^/## ;</tt>
</dl>

<p>So the URL of the script that's being executed is, in Perl,
<blockquote><pre>
"http://$ENV{'SERVER_NAME'}:$ENV{'SERVER_PORT'}/$ENV{'SCRIPT_NAME'}"
</pre></blockquote>
<p>The complete URL the script was invoked with may also have 
PATH_INFO and QUERY_STRING at the end.

<p>Once again, see them all at
<a href="http://hoohoo.ncsa.uiuc.edu/cgi/env.html">NCSA's complete list</a>.

<p><a href="#top">Back to top of page</a>


<p><hr><p>

<a name="othertypes"></a>
<h2>Returning an Image or Other Non-HTML Response from a CGI Script</h2>

<p>Most CGI scripts return HTML data, but you can return whatever kind of 
data you want.  Just use the right
MIME type in the "Content-type:" line, followed by the required blank line,
followed by the raw data of the file you're sending back.  In the case of
HTML files, that raw data is the HTML text.  In the case of images, audio,
or video, it's raw binary data.  For example, to respond with a GIF file,
use:

<blockquote>
<tt>Content-type: image/gif
<br>
<br>GIF89a&%--- binary contents of GIF file here ---$(*&%(*@#......
</tt></blockquote>

<p>Your HTML file can load a script-generated image with
<blockquote><tt>&lt;img src="gifmaker.cgi?param1=value1&amp;param2=value2"&gt;</tt></blockquote>

<p>One of my favorite examples of this is the
<a href="http://www.eece.ksu.edu/IGR/">Interactive Graphics Renderer</a>,
which renders 3-D icons according to the colors, shape, texture, lighting,
etc. that you define.  You can use the resulting icons on your Web 
pages, as better list bullets and horizontal rules.
<i>Note: This site has temporarily lost its home; the author says
<a href="http://www.pobox.com/~spectre/webprojects.html">this</a> will
eventually point to the new location.</i>

<h3>MIME Types</h3>

<p>MIME types are standard, case-insensitive strings that identify a 
file type, used throughout the Internet for many purposes.  They start 
with the general type of file (like <tt>text</tt>, <tt>image</tt>, or 
<tt>audio</tt>), followed by a slash, and end with the specific type of 
file (like <tt>html</tt>, <tt>gif</tt>, or <tt>jpeg</tt>).  HTML files 
are identified with <tt>text/html</tt>, and GIFs and JPEGs are identified
with <tt>image/gif</tt> and <tt>image/jpeg</tt>.

<p><a href="#top">Back to top of page</a>


<p><hr><p>

<a name="getvspost"></a>
<h2>What is the difference between GET and POST?</h2>

<p>GET and POST are two different methods defined in HTTP that do very
different things, but both happen to be able to send form submissions
to the server.

<p>Normally, GET is used to get a file or other resource, possibly with
parameters specifying more exactly what is needed. In the case of form
input, GET fully includes it in the URL, like

<ul>
<p><tt>http://myhost.com/mypath/myscript.cgi?<b>name1=value1&amp;name2=value2
</b></tt>
</ul>

<p>GET is how your browser downloads most files, like HTML files
and images.  It can also be used for most form submissions,
if there's not too much data (the limit varies from browser to browser).

<p>The GET method is <i>idempotent</i>, meaning the 
side effects of several identical GET requests are the same as for one 
GET request.  In particular, browsers and proxies can cache GET responses, 
so two identical form submissions may not both make it to your CGI script.
So don't use GET if you want to log each request, or otherwise
store data from each request.

<p>Normally, POST is used to send a chunk of data to the server to
be processed, whatever that may entail. (The name POST might have come from
the idea of posting a note to a discussion group or newsgroup.)  When an
an HTML form is submitted using POST, your form data is attached to the
end of the POST request, in its own object.  This is not as quick and easy
as using GET, but is more versatile.  For example, you can send entire
files using POST.  Also, data size is not limited like it is with GET.

<p>All this is behind the scenes, however.  To the CGI programmer, GET and
POST work almost identically, and are equally easy to use.  The advantages
of POST are that you're unlimited in the data you can submit, and you can
count on your script being called every time the form is submitted.  
The advantage of GET is that your entire form submission can be 
encapsulated in one URL, like a hyperlink or bookmark (though see the 
<a href="http://www.io.com/~jsm/autopost/">AutoPOST</a> utility to do this 
with POST).

<p><a href="#top">Back to top of page</a>


<p><hr><p>

<a name="nph"></a>
<h2>Gaining More Control, with Non-Parsed Header Scripts</h2>

<p>Normally, when your CGI script prints the "<tt>Content-type:</tt>",
"<tt>Location:</tt>", or other headers, the server parses those
headers and generates an appropriate HTTP response for the user.
Occasionally, you may want finer control over the HTTP response.  Most
Web servers support <i>non-parsed header</i> (or "<b>NPH</b>")
scripts, which generate a complete HTTP response and bypass the normal
parsing by the server.  

<p>To use these, you need to know some
<a href="http://www.jmarshall.com/easy/http/">HTTP</a>-- specifically, the
formats of the
<a href="http://www.jmarshall.com/easy/http/#responseline">status line</a> and
<a href="http://www.jmarshall.com/easy/http/#headerlines">header lines</a>.

<p>In your non-parsed header script, just print the complete HTTP
status and header lines where a normal script would print the
"<tt>Content-Type:</tt>" line.  Include the trailing blank line. 
Whatever your script prints is sent to the user verbatim, as the 
complete HTTP response, with no modification by the server.

<p>Name your NPH scripts something starting with "nph-", like
"nph-myscript.cgi"; every script whose name starts with "nph-" will be
be handled as an NPH script.  This works on most servers, including
NCSA and Apache.  Other servers may use different schemes to identify
NPH scripts; read the docs or ask your webmaster.

<p>If this is confusing, don't worry.  In the unlikely event that you
ever need an NPH script, this will all make sense.

<p><a href="#top">Back to top of page</a>


<p><hr><p>

<a href="">Back to Main Page</a>

<p><hr>

&copy; 1996 <a href="mailto:james@jmarshall.com?subject=CGI Made Really Easy, Footnotes">James Marshall</a>
(comments encouraged)


<p>
<!--img src="/count/count.cgi?file=cgi_footnotes.html"-->
</body>
</html>
