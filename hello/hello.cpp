/*
 *  This file was generated by the SOM Compiler and Emitter Framework.
 *  Generated using: 
 *      SOM Emitter emitxtm: 2.41
 */
/******************************************************************************/
/*                                                                            */
/* COPYRIGHT:                                                                 */
/* ----------                                                                 */
/* Copyright (C) International Business Machines Corp., 1994.                 */
/* Copyright:(C) Apple Computer, Inc., 1994                                   */
/*                                                                            */
/* DISCLAIMER OF WARRANTIES:                                                  */
/* -------------------------                                                  */
/* The following [enclosed] code is sample code created by IBM                */
/* Corporation.  This sample code is not part of any standard IBM product     */
/* and is provided to you solely for the purpose of assisting you in the      */
/* development of your applications.  The code is provided "AS IS",           */
/* without warranty of any kind.  IBM shall not be liable for any damages     */
/* arising out of your use of the sample code, even if they have been         */
/* advised of the possibility of such damages.                                */
/*                                                                            */
/******************************************************************************/
/*
   File:    hello.cpp

   Contains:   Implementation of class HelloPart - Version 1
                For use with OpenDoc Alpha Kit (SOMBASE)

   Change History (most recent first):

        Final Version for DevCon6               Robert Tycast           1/06/95 
        Changed to SOM                          Robert Tycast          11/13/94 
        Ported to OS/2                          Dan Harkey              9/16/94
*/
#ifndef SOM_Module_hello_Source
#define SOM_Module_hello_Source
#endif
#define HelloPart_Class_Source

//+
#define INCL_WIN   
#define INCL_GPI
#define INCL_ODALTPOINT
#define INCL_ODARBITRATOR
#define INCL_ODCANVAS
#define INCL_ODFACET
#define INCL_ODFOCI
#define INCL_ODFOCUSSET
#define INCL_ODFRAME
#define INCL_ODSHAPE
#define INCL_ODSTDTYPES
#define INCL_ODSTDPROPS
#define INCL_ODTRANSFORM
#define INCL_ODSESSION
#define INCL_ODSTORAGEUNIT

#include <os2.h>
#include <stdio.h>
#include <string.h>
//-
#include "hello.xih"

#define kHelloWorldPart "IBM:Kind:HelloWorldPart"

// const ODPropertyName kMyPropContents = "My:Property:Contents";

SOM_Scope void  SOMLINK HelloCommonInitPart(HelloPart *somSelf, 
                                             Environment *ev, 
                                            ODStorageUnit* su)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloCommonInitPart");

}

SOM_Scope void  SOMLINK HelloSetOrigin(HelloPart *somSelf,  Environment *ev, 
                                       ODFacet* facet)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloSetOrigin");
//+

    ODTransform* localToGlobal = facet->GetContentTransform(ev);
    HPS hps = facet->GetCanvas(ev)->GetPlatformCanvas(ev);
    MATRIXLF mtx;
    facet->GetContentTransform(ev)->GetMATRIXLF(ev, &mtx);
    GpiSetModelTransformMatrix(hps, 9, &mtx, TRANSFORM_REPLACE);
    facet->GetCanvas(ev)->ReleasePlatformCanvas(ev);       
//-
}

SOM_Scope void  SOMLINK HelloRenderPart(HelloPart *somSelf,  Environment *ev, 
                                        ODFacet* facet, RECTL* pframeRect, 
                                        HelloPart_HPS hpsDraw)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloRenderPart");

//+
   // paint the background

   GpiResetPS(hpsDraw, GRES_ATTRS);

   somSelf->SetOrigin(ev, facet);

   // say "Hello World"

   FATTRS fat;
   POINTL grad = { 1, 4 };
   POINTL aptlPoints[TXTBOX_COUNT];
   LONG lcid = 101;
   memset(&fat, 0, sizeof(FATTRS));
   fat.usRecordLength = sizeof(FATTRS);
   strcpy(fat.szFacename, "Helv Bold");
   fat.fsFontUse = FATTR_FONTUSE_OUTLINE;

   FONTMETRICS fm;
   if (FONT_MATCH == GpiCreateLogFont( hpsDraw, NULL, lcid, &fat))
   {
      GpiSetCharSet(hpsDraw, lcid);
      GpiQueryFontMetrics(hpsDraw, sizeof(fm), &fm);
      GpiSetCharShear(hpsDraw, &grad);
      SIZEF sizfxBox ;
      sizfxBox.cy = MAKEFIXED(24,0);
      sizfxBox.cx = 24 * fm.lEmHeight * 0x10000 / fm.lEmInc;
      GpiSetCharBox(hpsDraw, &sizfxBox);
   }
   char   buffer[23];
   short  bufferlength;
   POINTL ptlString ;
   RECTL frameRect;

   GpiSetColor ( hpsDraw, CLR_BLACK );
   GpiSetTextAlignment(hpsDraw, TA_CENTER, TA_HALF);
   frameRect = *pframeRect;
   ptlString.x = frameRect.xRight/2;
   ptlString.y = frameRect.yTop;

   ptlString.y -= (fm.lMaxBaselineExt + fm.lMaxDescender)*2;
   bufferlength = sprintf(buffer,"Hello World!");
   GpiCharStringAt( hpsDraw, &ptlString, bufferlength, buffer);

   bufferlength = sprintf(buffer,"Click Rt. Mouse");
   ptlString.y -= (fm.lMaxBaselineExt + fm.lMaxDescender)*2;
   GpiCharStringAt ( hpsDraw, &ptlString, bufferlength, buffer);

   bufferlength = sprintf(buffer,"Button Here");
   ptlString.y -= (fm.lMaxBaselineExt + fm.lMaxDescender);
   GpiCharStringAt ( hpsDraw, &ptlString, bufferlength, buffer);

   bufferlength = sprintf(buffer,"%d", somThis->Iteration);
   ptlString.y -= (fm.lMaxBaselineExt + fm.lMaxDescender);
   GpiCharStringAt ( hpsDraw, &ptlString, bufferlength, buffer);

   GpiDeleteSetId(hpsDraw, lcid);
//-
}

SOM_Scope void  SOMLINK HellosomInit(HelloPart *somSelf)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HellosomInit");

//+
    somThis->Iteration = 0;         //Set up a value to be externalized
//-
    HelloPart_parent_ContainerPart_somInit(somSelf);
}

SOM_Scope void  SOMLINK HellosomUninit(HelloPart *somSelf)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HellosomUninit");

    HelloPart_parent_ContainerPart_somUninit(somSelf);
}

SOM_Scope void  SOMLINK HelloDraw(HelloPart *somSelf,  Environment *ev, 
                                  ODFacet* facet, ODShape* invalidShape)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloDraw");

    HelloPart_parent_ContainerPart_Draw(somSelf, ev, facet, invalidShape);

//+

   ODFrame* displayFrame = facet->GetFrame(ev);

   // Get Presentation Space

   HPS hpsDraw = facet->GetCanvas(ev)->GetPlatformCanvas(ev);

   // Get Bounding Box

   ODRgnHandle frameRgn = displayFrame->GetFrameShape(ev)->GetRegion(ev);
   RECTL frameRect;
   GpiQueryRegionBox(hpsDraw, frameRgn, &frameRect);

   // set up clipping
   ODRgnHandle saveClip;
   ODShape* clipShape = new ODShape;
   clipShape->CopyFrom(ev, facet->GetAggregateClipShape(ev));
   clipShape->Transform(ev, facet->GetContentTransform(ev));


// put it in PM terms

   ODRgnHandle clip = clipShape->GetRegion(ev);
   GpiSetClipRegion(hpsDraw, clip, &saveClip);

// Put your PM drawing routines here!
  
   somSelf->RenderPart(ev, facet, &frameRect, hpsDraw);  
     
   GpiSetClipRegion(hpsDraw, 0, &saveClip);
   facet->GetCanvas(ev)->ReleasePlatformCanvas(ev); 
   delete clipShape;
//-
}

SOM_Scope void  SOMLINK HelloExternalize(HelloPart *somSelf, 
                                          Environment *ev)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloExternalize");

    HelloPart_parent_ContainerPart_Externalize(somSelf, ev);

//+

// The moment of truth: write out our persistent value!

   ODStorageUnit* su = somSelf->GetStorageUnit(ev);    
   su->Focus(ev, kODPropContents,kODPosUndefined,
                                kHelloWorldPart,0,kODPosUndefined);
   su->SetValue(ev, sizeof(somThis->Iteration), &somThis->Iteration);
//-
}

SOM_Scope ODBoolean  SOMLINK HelloHandleEvent(HelloPart *somSelf, 
                                               Environment *ev, 
                                              ODEventData* event, 
                                              ODFrame* frame, 
                                              ODFacet* facet)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloHandleEvent");

//+

   Point windowPoint;
   ODBoolean handled = kODFalse;

   switch (event->msg)
   {
      case WM_BUTTON2DOWN:
            {
               somThis->Iteration++;
               frame->Invalidate(ev, kODNULL);    // Arrange for a reDraw!
            }
            handled = kODTrue;
            break;

      default:
      break;
  //       return kODFalse;

   }
//   return handled;


    return (HelloPart_parent_ContainerPart_HandleEvent(somSelf, 
                                                       ev, event, 
                                                       frame, 
                                                       facet));
//-
}

SOM_Scope void  SOMLINK HelloInitPart(HelloPart *somSelf,  Environment *ev, 
                                      ODStorageUnit* storageUnit)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloInitPart");

//+
// Setup a value in contents property in our storage unit
        
 storageUnit->AddProperty(ev, kODPropContents)->AddValue(ev, kHelloWorldPart);

//-
    HelloPart_parent_ContainerPart_InitPart(somSelf, ev, storageUnit);
}

SOM_Scope void  SOMLINK HelloInitPartFromStorage(HelloPart *somSelf, 
                                                  Environment *ev, 
                                                 ODStorageUnit* storageUnit)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloInitPartFromStorage");

    HelloPart_parent_ContainerPart_InitPartFromStorage(somSelf, 
                                                       ev, storageUnit);
//+
   storageUnit->Focus(ev, kODPropContents,kODPosUndefined,kHelloWorldPart,
                        0,kODPosUndefined);
   storageUnit->GetValue(ev, storageUnit->GetSize(ev),&somThis->Iteration);
//-
}

