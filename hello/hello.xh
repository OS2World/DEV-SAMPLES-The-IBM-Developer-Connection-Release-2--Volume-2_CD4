
/*
 * This file was generated by the SOM Compiler.
 * FileName: hello.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.2
 *     SOM Emitter emitxh: 2.41
 */

#ifndef SOM_HelloPart_xh
#define SOM_HelloPart_xh

class HelloPart;

#define HelloPart_MajorVersion 1
#define HelloPart_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_ContainerPart_xh
#include <cntnrprt.xh>
#endif

#ifndef HelloPart_API
#define HelloPart_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class ODObject;
class ODExtension;
class ODRefCntObject;
class ODPersistentObject;
class ODStorageUnit;
class ODPart;
class ODCanvas;
class ODFacet;
class ODFrame;
class ODLink;
class ODLinkSource;
class ODMenuBar;
class ODShape;
class ODStorageUnitView;
class ODTransform;
class ODDragItemIterator;
class ODSession;
class ODTypeList;
class ODEmbeddedFramesIterator;
class ODWindow;
class ODFocusSet;
class ODSemanticInterface;
class ODSelectedContainerPartExtension;
class ODNotebook;
class ODxOrderedCollection;
typedef
long  HelloPart_HPS;
typedef
long  HelloPart_HDC;

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_HPS
    #ifdef HPS
        #undef HPS
        #define SOMTGD_HPS 1
    #else
        #define HPS HelloPart_HPS
    #endif /* HPS */
#endif /* SOMTGD_HPS */
#endif /* SOM_DONT_USE_SHORT_NAMES */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_HDC
    #ifdef HDC
        #undef HDC
        #define SOMTGD_HDC 1
    #else
        #define HDC HelloPart_HDC
    #endif /* HDC */
#endif /* SOMTGD_HDC */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the HelloPart Class */
SOMEXTERN SOMClass * SOMLINK HelloPartNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the HelloPart class object, and the methods it introduces. */
SOMEXTERN struct HelloPartClassDataStructure {
	SOMClass *classObject;
	somMToken CommonInitPart;
	somMToken SetOrigin;
	somMToken RenderPart;
} SOMDLINK HelloPartClassData;
#define _HelloPart HelloPartClassData.classObject

/* The API to parentMtabs for HelloPart, and the instance data it introduces. */
SOMEXTERN struct HelloPartCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK HelloPartCClassData;

/*
 * -- Typedefs for HelloPart Method Procedures
 */
SOMEXTERN {
typedef void   (SOMLINK * somTD_HelloPart_CommonInitPart)(HelloPart *somSelf, Environment *ev,
		ODStorageUnit* su);
typedef void   (SOMLINK * somTD_HelloPart_SetOrigin)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet);
typedef void   (SOMLINK * somTD_HelloPart_RenderPart)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet,
		RECTL* pframeRect,
		HelloPart_HPS hpsDraw);

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef ODSemanticInterface*   (SOMLINK * somTD_HelloPart_GetSemanticInterface)(HelloPart *somSelf, Environment *ev);
typedef Proxy*   (SOMLINK * somTD_HelloPart_ProxyForFrame)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef void   (SOMLINK * somTD_HelloPart_CreateProxySelectionBorder)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet,
		Proxy* p);
typedef void   (SOMLINK * somTD_HelloPart_InvalidateSelection)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef void   (SOMLINK * somTD_HelloPart_ClipEmbeddedFrames)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef void   (SOMLINK * somTD_HelloPart_CommonInitContainerPart)(HelloPart *somSelf, Environment *ev);
typedef ODxOrderedCollection*   (SOMLINK * somTD_HelloPart_GetEmbeddedFrames)(HelloPart *somSelf, Environment *ev);
typedef Proxy*   (SOMLINK * somTD_HelloPart_ProxyForFrameID)(HelloPart *somSelf, Environment *ev,
		ODID frameID);
typedef void   (SOMLINK * somTD_HelloPart_HighlightSelection)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet);
typedef void   (SOMLINK * somTD_HelloPart_HighlightProxyBorder)(HelloPart *somSelf, Environment *ev,
		Proxy* p,
		ODFacet* facet);
typedef void   (SOMLINK * somTD_HelloPart_HighlightContentObject)(HelloPart *somSelf, Environment *ev,
		Proxy* p,
		ODFacet* facet);
typedef void   (SOMLINK * somTD_HelloPart_ClipEmbeddedFacets)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet);
typedef void   (SOMLINK * somTD_HelloPart_FillSelectedMenu)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame,
		ODMenuBar* menubar);
typedef void   (SOMLINK * somTD_HelloPart_AdjustPopupMenu)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame,
		ODMenuBar* menubar,
		ODMenuID menuID);
typedef void   (SOMLINK * somTD_HelloPart_AdjustSPEMenu)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame,
		ODMenuBar* menubar,
		ODMenuID menuID);
typedef void   (SOMLINK * somTD_HelloPart_EmptySelection)(HelloPart *somSelf, Environment *ev);
typedef ODMenuBar*   (SOMLINK * somTD_HelloPart_GetSPEMenuOfSelection)(HelloPart *somSelf, Environment *ev);
typedef void   (SOMLINK * somTD_HelloPart_RefreshRemappedSPEMenuOfSelection)(HelloPart *somSelf, Environment *ev);
typedef ODBoolean   (SOMLINK * somTD_HelloPart_HandleMouseDown)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet,
		ODPoint* where,
		ODEventData* event);
typedef void   (SOMLINK * somTD_HelloPart_MoveResize)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet,
		Proxy* selection,
		ODSLong fs);
typedef ODBoolean   (SOMLINK * somTD_HelloPart_HandleMouseDownDrag)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet,
		Proxy* selection,
		ODEventData* event);
typedef ODBoolean   (SOMLINK * somTD_HelloPart_HandleMouseDownEdgeResize)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet,
		Proxy* selection,
		POINTL* mouse);
typedef ODBoolean   (SOMLINK * somTD_HelloPart_HandleMouseDownCornerResize)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet,
		Proxy* selection,
		POINTL* mouse);
typedef ODBoolean   (SOMLINK * somTD_HelloPart_HandleMouseDownInEmbeddedFrame)(HelloPart *somSelf, Environment *ev,
		ODFacet* container,
		ODFacet* facet,
		ODPoint* where,
		ODEventData* event);
typedef ODBoolean   (SOMLINK * somTD_HelloPart_HandleKeyDown)(HelloPart *somSelf, Environment *ev,
		ODFrame* focusFrame,
		ODEventData* event);
typedef ODBoolean   (SOMLINK * somTD_HelloPart_HandleMenuEvent)(HelloPart *somSelf, Environment *ev,
		ODFrame* focusFrame,
		ODEventData* event);
typedef ODBoolean   (SOMLINK * somTD_HelloPart_HandleMouseMove)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet,
		ODFrame* frame,
		ODPoint* where,
		ODEventData* event);
typedef ODBoolean   (SOMLINK * somTD_HelloPart_HandleMouseUp)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet,
		ODFrame* frame,
		ODPoint* where,
		ODEventData* event);
typedef void   (SOMLINK * somTD_HelloPart_UpdateTrackRect)(HelloPart *somSelf, Environment *ev,
		POINTL* ptlMouse,
		ODPlatformWindow hwnd);
typedef void   (SOMLINK * somTD_HelloPart_MouseFocusLost)(HelloPart *somSelf, Environment *ev,
		ODFrame* ownerFrame);
typedef ODBoolean   (SOMLINK * somTD_HelloPart_HandlePrinting)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef ODFacet*   (SOMLINK * somTD_HelloPart_BeginPrinting)(HelloPart *somSelf, Environment *ev,
		ODFrame* rootFrame,
		PRNINFO* pPI);
typedef void   (SOMLINK * somTD_HelloPart_PrintPage)(HelloPart *somSelf, Environment *ev,
		ODFacet* prFacet,
		ODUShort pagenum,
		PRNINFO* pPI);
typedef long   (SOMLINK * somTD_HelloPart_PrintPages)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame,
		PRNINFO* pPI);
typedef void   (SOMLINK * somTD_HelloPart_EndPrinting)(HelloPart *somSelf, Environment *ev,
		ODFacet* prFacet);
typedef ODBoolean   (SOMLINK * somTD_HelloPart_DoCut)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef ODBoolean   (SOMLINK * somTD_HelloPart_DoCopy)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef ODBoolean   (SOMLINK * somTD_HelloPart_DoPaste)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef ODBoolean   (SOMLINK * somTD_HelloPart_DoPasteLink)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef ODBoolean   (SOMLINK * somTD_HelloPart_DoClear)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef ODBoolean   (SOMLINK * somTD_HelloPart_DoSelectAll)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef void   (SOMLINK * somTD_HelloPart_ActivateFrame)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef void   (SOMLINK * somTD_HelloPart_DeActivateFrame)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef void   (SOMLINK * somTD_HelloPart_ActivatingWindow)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef void   (SOMLINK * somTD_HelloPart_DeActivatingWindow)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef void   (SOMLINK * somTD_HelloPart_InstallMenus)(HelloPart *somSelf, Environment *ev,
		ODFrame* aFrame);
typedef void   (SOMLINK * somTD_HelloPart_RemoveMenus)(HelloPart *somSelf, Environment *ev,
		ODFrame* aFrame);
typedef void   (SOMLINK * somTD_HelloPart_UserSetBGColor)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame,
		RGBColor whichColor);
typedef void   (SOMLINK * somTD_HelloPart_SetBGColor1)(HelloPart *somSelf, Environment *ev,
		ODFrame* aFrame,
		ODUShort whichColor);
typedef void   (SOMLINK * somTD_HelloPart_SetBGColor2)(HelloPart *somSelf, Environment *ev,
		ODFrame* aFrame,
		RGBColor whichColor);
typedef void   (SOMLINK * somTD_HelloPart_Embed)(HelloPart *somSelf, Environment *ev,
		short item,
		ODFrame* frame,
		ODPart** newPart);
typedef void   (SOMLINK * somTD_HelloPart_SetGrafPortOrigin)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet);
typedef void   (SOMLINK * somTD_HelloPart_InvalEmbedFrameAfterResize)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet,
		Proxy* selection,
		ODShape* newShape,
		ODTransform* newTransform);
typedef RECTL*   (SOMLINK * somTD_HelloPart_GetSelectionRectLocal)(HelloPart *somSelf, Environment *ev,
		Proxy* selection);
typedef ODFrame*   (SOMLINK * somTD_HelloPart_MakeEmbeddedFrame)(HelloPart *somSelf, Environment *ev,
		ODFrame* containingFrame,
		ODShape* frameShape,
		ODTransform* externalTransform,
		ODPart* embedPart,
		ODBoolean isOverlaid);
typedef ODWindow*   (SOMLINK * somTD_HelloPart_CreateWindow)(HelloPart *somSelf, Environment *ev,
		ODFrame* sourceFrame);
typedef ODBoolean   (SOMLINK * somTD_HelloPart_MoveToFront)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef ODBoolean   (SOMLINK * somTD_HelloPart_MoveToBack)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef ODBoolean   (SOMLINK * somTD_HelloPart_MoveForward)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef ODBoolean   (SOMLINK * somTD_HelloPart_MoveBackward)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef void   (SOMLINK * somTD_HelloPart_ClearAccelTable)(HelloPart *somSelf, Environment *ev,
		ODFrame* oldOwner);
typedef void   (SOMLINK * somTD_HelloPart_SetAccelTable)(HelloPart *somSelf, Environment *ev,
		ODFrame* newOwner);
typedef long   (SOMLINK * somTD_HelloPart_GetDemoState)(HelloPart *somSelf, Environment *ev);
typedef void   (SOMLINK * somTD_HelloPart_somInit)(HelloPart *somSelf);
typedef void   (SOMLINK * somTD_HelloPart_somUninit)(HelloPart *somSelf);
typedef void   (SOMLINK * somTD_HelloPart_FulfillPromise)(HelloPart *somSelf, Environment *ev,
		ODStorageUnitView* promiseSUView);
typedef void   (SOMLINK * somTD_HelloPart_DropCompleted)(HelloPart *somSelf, Environment *ev,
		ODPart* destPart,
		ODDropResult dropResult);
typedef MRESULT   (SOMLINK * somTD_HelloPart_DragEnter)(HelloPart *somSelf, Environment *ev,
		ODDragItemIterator* dragInfo,
		ODFacet* facet,
		ODPoint* where);
typedef MRESULT   (SOMLINK * somTD_HelloPart_DragWithin)(HelloPart *somSelf, Environment *ev,
		ODDragItemIterator* dragInfo,
		ODFacet* facet,
		ODPoint* where);
typedef void   (SOMLINK * somTD_HelloPart_DragLeave)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet,
		ODPoint* where);
typedef ODDropResult   (SOMLINK * somTD_HelloPart_Drop)(HelloPart *somSelf, Environment *ev,
		ODDragItemIterator* dropInfo,
		ODFacet* facet,
		ODPoint* where);
typedef ODExtension*   (SOMLINK * somTD_HelloPart_GetExtension)(HelloPart *somSelf, Environment *ev,
		ODType extensionName);
typedef void   (SOMLINK * somTD_HelloPart_ReleaseExtension)(HelloPart *somSelf, Environment *ev,
		ODExtension* extension);
typedef boolean   (SOMLINK * somTD_HelloPart_HasExtension)(HelloPart *somSelf, Environment *ev,
		ODType extensionName);
typedef void   (SOMLINK * somTD_HelloPart_ContainingPartPropertiesChanged)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame,
		ODStorageUnit* propertyUnit);
typedef ODStorageUnit*   (SOMLINK * somTD_HelloPart_GetContainingPartProperties)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef ODMenuBar*   (SOMLINK * somTD_HelloPart_CreateRootMenuBar)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef void   (SOMLINK * somTD_HelloPart_RevealFrame)(HelloPart *somSelf, Environment *ev,
		ODFrame* embeddedFrame,
		ODShape* revealShape);
typedef void   (SOMLINK * somTD_HelloPart_EmbeddedFrameSpec)(HelloPart *somSelf, Environment *ev,
		ODFrame* embeddedFrame,
		ODObjectSpec spec);
typedef ODEmbeddedFramesIterator*   (SOMLINK * somTD_HelloPart_CreateEmbeddedFramesIterator)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef void   (SOMLINK * somTD_HelloPart_AddDisplayFrame)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef void   (SOMLINK * somTD_HelloPart_AttachSourceFrame)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame,
		ODFrame* sourceFrame);
typedef void   (SOMLINK * somTD_HelloPart_RemoveDisplayFrame)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef void   (SOMLINK * somTD_HelloPart_CloseDisplayFrame)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef void   (SOMLINK * somTD_HelloPart_FrameShapeChanged)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef void   (SOMLINK * somTD_HelloPart_ViewTypeChanged)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef void   (SOMLINK * somTD_HelloPart_PresentationChanged)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef void   (SOMLINK * somTD_HelloPart_SequenceChanged)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef void   (SOMLINK * somTD_HelloPart_WritePartInfo)(HelloPart *somSelf, Environment *ev,
		ODPtr partInfo,
		ODStorageUnitView* storageUnitView);
typedef ODPtr   (SOMLINK * somTD_HelloPart_ReadPartInfo)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame,
		ODStorageUnitView* storageUnitView);
typedef ODID   (SOMLINK * somTD_HelloPart_Open)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef ODFrame*   (SOMLINK * somTD_HelloPart_RequestEmbeddedFrame)(HelloPart *somSelf, Environment *ev,
		ODFrame* containingFrame,
		ODFrame* baseFrame,
		ODShape* frameShape,
		ODPart* embedPart,
		ODTypeToken viewType,
		ODTypeToken presentation,
		ODBoolean isOverlaid);
typedef void   (SOMLINK * somTD_HelloPart_RemoveEmbeddedFrame)(HelloPart *somSelf, Environment *ev,
		ODFrame* embeddedFrame);
typedef ODShape*   (SOMLINK * somTD_HelloPart_RequestFrameShape)(HelloPart *somSelf, Environment *ev,
		ODFrame* embeddedFrame,
		ODShape* frameShape);
typedef void   (SOMLINK * somTD_HelloPart_UsedShapeChanged)(HelloPart *somSelf, Environment *ev,
		ODFrame* embeddedFrame);
typedef ODShape*   (SOMLINK * somTD_HelloPart_AdjustBorderShape)(HelloPart *somSelf, Environment *ev,
		ODFrame* embeddedFrame,
		ODShape* shape);
typedef void   (SOMLINK * somTD_HelloPart_FacetAdded)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet);
typedef void   (SOMLINK * somTD_HelloPart_FacetRemoved)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet);
typedef void   (SOMLINK * somTD_HelloPart_CanvasChanged)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet);
typedef void   (SOMLINK * somTD_HelloPart_GeometryChanged)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet);
typedef void   (SOMLINK * somTD_HelloPart_Draw)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet,
		ODShape* invalidShape);
typedef void   (SOMLINK * somTD_HelloPart_CanvasUpdated)(HelloPart *somSelf, Environment *ev,
		ODCanvas* canvas);
typedef void   (SOMLINK * somTD_HelloPart_HighlightChanged)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet);
typedef ODULong   (SOMLINK * somTD_HelloPart_GetPrintResolution)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef ODLink*   (SOMLINK * somTD_HelloPart_CreateLink)(HelloPart *somSelf, Environment *ev,
		ODPtr data,
		ODULong size);
typedef void   (SOMLINK * somTD_HelloPart_LinkUpdated)(HelloPart *somSelf, Environment *ev,
		ODLink* updatedLink,
		ODChangeID id);
typedef void   (SOMLINK * somTD_HelloPart_RevealLink)(HelloPart *somSelf, Environment *ev,
		ODLinkSource* linkSource);
typedef void   (SOMLINK * somTD_HelloPart_EmbeddedFrameChanged)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame,
		ODChangeID change);
typedef void   (SOMLINK * somTD_HelloPart_LinkStatusChanged)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef ODBoolean   (SOMLINK * somTD_HelloPart_BeginRelinquishFocus)(HelloPart *somSelf, Environment *ev,
		ODTypeToken focus,
		ODFrame* ownerFrame,
		ODFrame* proposedFrame);
typedef void   (SOMLINK * somTD_HelloPart_CommitRelinquishFocus)(HelloPart *somSelf, Environment *ev,
		ODTypeToken focus,
		ODFrame* ownerFrame,
		ODFrame* proposedFrame);
typedef void   (SOMLINK * somTD_HelloPart_AbortRelinquishFocus)(HelloPart *somSelf, Environment *ev,
		ODTypeToken focus,
		ODFrame* ownerFrame,
		ODFrame* proposedFrame);
typedef void   (SOMLINK * somTD_HelloPart_FocusAcquired)(HelloPart *somSelf, Environment *ev,
		ODTypeToken focus,
		ODFrame* ownerFrame);
typedef void   (SOMLINK * somTD_HelloPart_FocusLost)(HelloPart *somSelf, Environment *ev,
		ODTypeToken focus,
		ODFrame* ownerFrame);
typedef void   (SOMLINK * somTD_HelloPart_CloneInto)(HelloPart *somSelf, Environment *ev,
		ODDraftKey key,
		ODStorageUnit* storageUnit,
		ODStorageUnit* initiatingFrame);
typedef void   (SOMLINK * somTD_HelloPart_ExternalizeKinds)(HelloPart *somSelf, Environment *ev,
		ODTypeList* kindset);
typedef void   (SOMLINK * somTD_HelloPart_Externalize)(HelloPart *somSelf, Environment *ev);
typedef void   (SOMLINK * somTD_HelloPart_ChangeKind)(HelloPart *somSelf, Environment *ev,
		ODType kind);
typedef ODBoolean   (SOMLINK * somTD_HelloPart_HandleEvent)(HelloPart *somSelf, Environment *ev,
		ODEventData* event,
		ODFrame* frame,
		ODFacet* facet);
typedef ODBoolean   (SOMLINK * somTD_HelloPart_HandleEventInEmbedded)(HelloPart *somSelf, Environment *ev,
		ODEventData* event,
		ODFrame* frame,
		ODFacet* facet,
		ODFrame* embeddedFrame,
		ODFacet* embeddedFacet);
typedef void   (SOMLINK * somTD_HelloPart_MouseEnter)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet,
		ODPoint* where);
typedef void   (SOMLINK * somTD_HelloPart_MouseWithin)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet,
		ODPoint* where);
typedef void   (SOMLINK * somTD_HelloPart_MouseLeave)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet);
typedef void   (SOMLINK * somTD_HelloPart_AdjustMenus)(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
typedef void   (SOMLINK * somTD_HelloPart_UndoAction)(HelloPart *somSelf, Environment *ev,
		ODActionData actionState);
typedef void   (SOMLINK * somTD_HelloPart_RedoAction)(HelloPart *somSelf, Environment *ev,
		ODActionData actionState);
typedef void   (SOMLINK * somTD_HelloPart_DisposeActionState)(HelloPart *somSelf, Environment *ev,
		ODActionData actionState,
		ODDoneState doneState);
typedef void   (SOMLINK * somTD_HelloPart_WriteActionState)(HelloPart *somSelf, Environment *ev,
		ODPtr actionState,
		ODStorageUnitView* storageUnitView);
typedef ODPtr   (SOMLINK * somTD_HelloPart_ReadActionState)(HelloPart *somSelf, Environment *ev,
		ODStorageUnitView* storageUnitView);
typedef void   (SOMLINK * somTD_HelloPart_InitPart)(HelloPart *somSelf, Environment *ev,
		ODStorageUnit* storageUnit);
typedef void   (SOMLINK * somTD_HelloPart_InitPartFromStorage)(HelloPart *somSelf, Environment *ev,
		ODStorageUnit* storageUnit);
typedef void   (SOMLINK * somTD_HelloPart_Release)(HelloPart *somSelf, Environment *ev);
typedef void   (SOMLINK * somTD_HelloPart_InitPersistentObject)(HelloPart *somSelf, Environment *ev,
		ODStorageUnit* storageUnit);
typedef void   (SOMLINK * somTD_HelloPart_InitPersistentObjectFromStorage)(HelloPart *somSelf, Environment *ev,
		ODStorageUnit* storageUnit);
typedef void   (SOMLINK * somTD_HelloPart_ReleaseAll)(HelloPart *somSelf, Environment *ev);
typedef ODStorageUnit*   (SOMLINK * somTD_HelloPart_GetStorageUnit)(HelloPart *somSelf, Environment *ev);
typedef ODID   (SOMLINK * somTD_HelloPart_GetID)(HelloPart *somSelf, Environment *ev);
typedef void   (SOMLINK * somTD_HelloPart_InitRefCntObject)(HelloPart *somSelf, Environment *ev);
typedef void   (SOMLINK * somTD_HelloPart_IncrementRefCount)(HelloPart *somSelf, Environment *ev);
typedef ODULong   (SOMLINK * somTD_HelloPart_GetRefCount)(HelloPart *somSelf, Environment *ev);
typedef void   (SOMLINK * somTD_HelloPart_InitObject)(HelloPart *somSelf, Environment *ev);
typedef boolean   (SOMLINK * somTD_HelloPart_IsInitialized)(HelloPart *somSelf, Environment *ev);
typedef ODSize   (SOMLINK * somTD_HelloPart_Purge)(HelloPart *somSelf, Environment *ev,
		ODSize size);
typedef void   (SOMLINK * somTD_HelloPart_SubClassResponsibility)(HelloPart *somSelf, Environment *ev);
typedef void   (SOMLINK * somTD_HelloPart_somDefaultInit)(HelloPart *somSelf,
		somInitCtrl* ctrl);
typedef void   (SOMLINK * somTD_HelloPart_somDestruct)(HelloPart *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef void   (SOMLINK * somTD_HelloPart_somDefaultCopyInit)(HelloPart *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef HelloPart*   (SOMLINK * somTD_HelloPart_somDefaultAssign)(HelloPart *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_HelloPart_somDefaultConstCopyInit)(HelloPart *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_HelloPart_somDefaultVCopyInit)(HelloPart *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_HelloPart_somDefaultConstVCopyInit)(HelloPart *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef HelloPart*   (SOMLINK * somTD_HelloPart_somDefaultConstAssign)(HelloPart *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef HelloPart*   (SOMLINK * somTD_HelloPart_somDefaultVAssign)(HelloPart *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef HelloPart*   (SOMLINK * somTD_HelloPart_somDefaultConstVAssign)(HelloPart *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_HelloPart_somFree)(HelloPart *somSelf);
typedef SOMClass*   (SOMLINK * somTD_HelloPart_somGetClass)(HelloPart *somSelf);
typedef string   (SOMLINK * somTD_HelloPart_somGetClassName)(HelloPart *somSelf);
typedef long   (SOMLINK * somTD_HelloPart_somGetSize)(HelloPart *somSelf);
typedef boolean   (SOMLINK * somTD_HelloPart_somIsA)(HelloPart *somSelf,
		SOMClass* aClassObj);
typedef boolean   (SOMLINK * somTD_HelloPart_somIsInstanceOf)(HelloPart *somSelf,
		SOMClass* aClassObj);
typedef boolean   (SOMLINK * somTD_HelloPart_somRespondsTo)(HelloPart *somSelf,
		somId mId);
typedef boolean   (SOMLINK * somTD_HelloPart_somDispatch)(HelloPart *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef boolean   (SOMLINK * somTD_HelloPart_somClassDispatch)(HelloPart *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef boolean   (SOMLINK * somTD_HelloPart_somCastObj)(HelloPart *somSelf,
		SOMClass* cls);
typedef boolean   (SOMLINK * somTD_HelloPart_somResetObj)(HelloPart *somSelf);
typedef void   (SOMLINK * somTD_HelloPart_somDispatchV)(HelloPart *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef long   (SOMLINK * somTD_HelloPart_somDispatchL)(HelloPart *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef void*   (SOMLINK * somTD_HelloPart_somDispatchA)(HelloPart *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef double   (SOMLINK * somTD_HelloPart_somDispatchD)(HelloPart *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef SOMObject*   (SOMLINK * somTD_HelloPart_somPrintSelf)(HelloPart *somSelf);
typedef void   (SOMLINK * somTD_HelloPart_somDumpSelf)(HelloPart *somSelf,
		long level);
typedef void   (SOMLINK * somTD_HelloPart_somDumpSelfInt)(HelloPart *somSelf,
		long level);
}

#endif /* HelloPart_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for HelloPart
 */
class HelloPart : public ContainerPart
{
public:

// HelloPart::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!_HelloPart) HelloPartNewClass(HelloPart_MajorVersion,HelloPart_MinorVersion);
   return (void*)
      SOM_Resolve(_HelloPart,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_HelloPart));
}

// HelloPart::delete uses the default deallocator for the object's class.
void operator delete(void * obj)
{
   somToken objCls = obj ? *(void**)obj : (somToken) NULL;
   if (somIsObj(objCls)) {
      SOM_Resolve(objCls,SOMClass,somDeallocate)
         ((SOMClass*)objCls, (string)obj);
   }
}

HelloPart()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (HelloPartCClassData.parentMtab))->mtab)
      return;
   somDefaultInit(0);
}

HelloPart(HelloPart* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (HelloPartCClassData.parentMtab))->mtab)
      return;
   somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

HelloPart(const HelloPart* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (HelloPartCClassData.parentMtab))->mtab)
      return;
   somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

~HelloPart()
{
   if (!somIsObj(this)) return;
   somDestruct(0,0);
   *(void**)this = **(void***)this;
}


/* method: CommonInitPart */
void   CommonInitPart(Environment *ev,
		ODStorageUnit* su)
{
   SOM_ResolveD(this,HelloPart,HelloPart,CommonInitPart)
	(this, ev,su);
}


/* method: SetOrigin */
void   SetOrigin(Environment *ev,
		ODFacet* facet)
{
   SOM_ResolveD(this,HelloPart,HelloPart,SetOrigin)
	(this, ev,facet);
}


/* method: RenderPart */
void   RenderPart(Environment *ev,
		ODFacet* facet,
		RECTL* pframeRect,
		HelloPart_HPS hpsDraw)
{
   SOM_ResolveD(this,HelloPart,HelloPart,RenderPart)
	(this, ev,facet,pframeRect,hpsDraw);
}


/*
 * Reintroduce inherited methods
 */

/* method: GetSemanticInterface */
ODSemanticInterface*   GetSemanticInterface(Environment *ev)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,GetSemanticInterface)
	(this, ev);
}


/* method: ProxyForFrame */
Proxy*   ProxyForFrame(Environment *ev,
		ODFrame* frame)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,ProxyForFrame)
	(this, ev,frame);
}


/* method: CreateProxySelectionBorder */
void   CreateProxySelectionBorder(Environment *ev,
		ODFacet* facet,
		Proxy* p)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,CreateProxySelectionBorder)
	(this, ev,facet,p);
}


/* method: InvalidateSelection */
void   InvalidateSelection(Environment *ev,
		ODFrame* frame)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,InvalidateSelection)
	(this, ev,frame);
}


/* method: ClipEmbeddedFrames */
void   ClipEmbeddedFrames(Environment *ev,
		ODFrame* frame)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,ClipEmbeddedFrames)
	(this, ev,frame);
}


/* method: CommonInitContainerPart */
void   CommonInitContainerPart(Environment *ev)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,CommonInitContainerPart)
	(this, ev);
}


/* method: GetEmbeddedFrames */
ODxOrderedCollection*   GetEmbeddedFrames(Environment *ev)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,GetEmbeddedFrames)
	(this, ev);
}


/* method: ProxyForFrameID */
Proxy*   ProxyForFrameID(Environment *ev,
		ODID frameID)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,ProxyForFrameID)
	(this, ev,frameID);
}


/* method: HighlightSelection */
void   HighlightSelection(Environment *ev,
		ODFacet* facet)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,HighlightSelection)
	(this, ev,facet);
}


/* method: HighlightProxyBorder */
void   HighlightProxyBorder(Environment *ev,
		Proxy* p,
		ODFacet* facet)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,HighlightProxyBorder)
	(this, ev,p,facet);
}


/* method: HighlightContentObject */
void   HighlightContentObject(Environment *ev,
		Proxy* p,
		ODFacet* facet)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,HighlightContentObject)
	(this, ev,p,facet);
}


/* method: ClipEmbeddedFacets */
void   ClipEmbeddedFacets(Environment *ev,
		ODFacet* facet)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,ClipEmbeddedFacets)
	(this, ev,facet);
}


/* method: FillSelectedMenu */
void   FillSelectedMenu(Environment *ev,
		ODFrame* frame,
		ODMenuBar* menubar)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,FillSelectedMenu)
	(this, ev,frame,menubar);
}


/* method: AdjustPopupMenu */
void   AdjustPopupMenu(Environment *ev,
		ODFrame* frame,
		ODMenuBar* menubar,
		ODMenuID menuID)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,AdjustPopupMenu)
	(this, ev,frame,menubar,menuID);
}


/* method: AdjustSPEMenu */
void   AdjustSPEMenu(Environment *ev,
		ODFrame* frame,
		ODMenuBar* menubar,
		ODMenuID menuID)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,AdjustSPEMenu)
	(this, ev,frame,menubar,menuID);
}


/* method: EmptySelection */
void   EmptySelection(Environment *ev)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,EmptySelection)
	(this, ev);
}


/* method: GetSPEMenuOfSelection */
ODMenuBar*   GetSPEMenuOfSelection(Environment *ev)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,GetSPEMenuOfSelection)
	(this, ev);
}


/* method: RefreshRemappedSPEMenuOfSelection */
void   RefreshRemappedSPEMenuOfSelection(Environment *ev)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,RefreshRemappedSPEMenuOfSelection)
	(this, ev);
}


/* method: HandleMouseDown */
ODBoolean   HandleMouseDown(Environment *ev,
		ODFacet* facet,
		ODPoint* where,
		ODEventData* event)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,HandleMouseDown)
	(this, ev,facet,where,event);
}


/* method: MoveResize */
void   MoveResize(Environment *ev,
		ODFacet* facet,
		Proxy* selection,
		ODSLong fs)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,MoveResize)
	(this, ev,facet,selection,fs);
}


/* method: HandleMouseDownDrag */
ODBoolean   HandleMouseDownDrag(Environment *ev,
		ODFacet* facet,
		Proxy* selection,
		ODEventData* event)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,HandleMouseDownDrag)
	(this, ev,facet,selection,event);
}


/* method: HandleMouseDownEdgeResize */
ODBoolean   HandleMouseDownEdgeResize(Environment *ev,
		ODFacet* facet,
		Proxy* selection,
		POINTL* mouse)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,HandleMouseDownEdgeResize)
	(this, ev,facet,selection,mouse);
}


/* method: HandleMouseDownCornerResize */
ODBoolean   HandleMouseDownCornerResize(Environment *ev,
		ODFacet* facet,
		Proxy* selection,
		POINTL* mouse)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,HandleMouseDownCornerResize)
	(this, ev,facet,selection,mouse);
}


/* method: HandleMouseDownInEmbeddedFrame */
ODBoolean   HandleMouseDownInEmbeddedFrame(Environment *ev,
		ODFacet* container,
		ODFacet* facet,
		ODPoint* where,
		ODEventData* event)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,HandleMouseDownInEmbeddedFrame)
	(this, ev,container,facet,where,event);
}


/* method: HandleKeyDown */
ODBoolean   HandleKeyDown(Environment *ev,
		ODFrame* focusFrame,
		ODEventData* event)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,HandleKeyDown)
	(this, ev,focusFrame,event);
}


/* method: HandleMenuEvent */
ODBoolean   HandleMenuEvent(Environment *ev,
		ODFrame* focusFrame,
		ODEventData* event)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,HandleMenuEvent)
	(this, ev,focusFrame,event);
}


/* method: HandleMouseMove */
ODBoolean   HandleMouseMove(Environment *ev,
		ODFacet* facet,
		ODFrame* frame,
		ODPoint* where,
		ODEventData* event)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,HandleMouseMove)
	(this, ev,facet,frame,where,event);
}


/* method: HandleMouseUp */
ODBoolean   HandleMouseUp(Environment *ev,
		ODFacet* facet,
		ODFrame* frame,
		ODPoint* where,
		ODEventData* event)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,HandleMouseUp)
	(this, ev,facet,frame,where,event);
}


/* method: UpdateTrackRect */
void   UpdateTrackRect(Environment *ev,
		POINTL* ptlMouse,
		ODPlatformWindow hwnd)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,UpdateTrackRect)
	(this, ev,ptlMouse,hwnd);
}


/* method: MouseFocusLost */
void   MouseFocusLost(Environment *ev,
		ODFrame* ownerFrame)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,MouseFocusLost)
	(this, ev,ownerFrame);
}


/* method: HandlePrinting */
ODBoolean   HandlePrinting(Environment *ev,
		ODFrame* frame)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,HandlePrinting)
	(this, ev,frame);
}


/* method: BeginPrinting */
ODFacet*   BeginPrinting(Environment *ev,
		ODFrame* rootFrame,
		PRNINFO* pPI)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,BeginPrinting)
	(this, ev,rootFrame,pPI);
}


/* method: PrintPage */
void   PrintPage(Environment *ev,
		ODFacet* prFacet,
		ODUShort pagenum,
		PRNINFO* pPI)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,PrintPage)
	(this, ev,prFacet,pagenum,pPI);
}


/* method: PrintPages */
long   PrintPages(Environment *ev,
		ODFrame* frame,
		PRNINFO* pPI)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,PrintPages)
	(this, ev,frame,pPI);
}


/* method: EndPrinting */
void   EndPrinting(Environment *ev,
		ODFacet* prFacet)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,EndPrinting)
	(this, ev,prFacet);
}


/* method: DoCut */
ODBoolean   DoCut(Environment *ev,
		ODFrame* frame)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,DoCut)
	(this, ev,frame);
}


/* method: DoCopy */
ODBoolean   DoCopy(Environment *ev,
		ODFrame* frame)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,DoCopy)
	(this, ev,frame);
}


/* method: DoPaste */
ODBoolean   DoPaste(Environment *ev,
		ODFrame* frame)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,DoPaste)
	(this, ev,frame);
}


/* method: DoPasteLink */
ODBoolean   DoPasteLink(Environment *ev,
		ODFrame* frame)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,DoPasteLink)
	(this, ev,frame);
}


/* method: DoClear */
ODBoolean   DoClear(Environment *ev,
		ODFrame* frame)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,DoClear)
	(this, ev,frame);
}


/* method: DoSelectAll */
ODBoolean   DoSelectAll(Environment *ev,
		ODFrame* frame)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,DoSelectAll)
	(this, ev,frame);
}


/* method: ActivateFrame */
void   ActivateFrame(Environment *ev,
		ODFrame* frame)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,ActivateFrame)
	(this, ev,frame);
}


/* method: DeActivateFrame */
void   DeActivateFrame(Environment *ev,
		ODFrame* frame)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,DeActivateFrame)
	(this, ev,frame);
}


/* method: ActivatingWindow */
void   ActivatingWindow(Environment *ev,
		ODFrame* frame)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,ActivatingWindow)
	(this, ev,frame);
}


/* method: DeActivatingWindow */
void   DeActivatingWindow(Environment *ev,
		ODFrame* frame)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,DeActivatingWindow)
	(this, ev,frame);
}


/* method: InstallMenus */
void   InstallMenus(Environment *ev,
		ODFrame* aFrame)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,InstallMenus)
	(this, ev,aFrame);
}


/* method: RemoveMenus */
void   RemoveMenus(Environment *ev,
		ODFrame* aFrame)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,RemoveMenus)
	(this, ev,aFrame);
}


/* method: UserSetBGColor */
void   UserSetBGColor(Environment *ev,
		ODFrame* frame,
		RGBColor whichColor)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,UserSetBGColor)
	(this, ev,frame,whichColor);
}


/* method: SetBGColor1 */
void   SetBGColor1(Environment *ev,
		ODFrame* aFrame,
		ODUShort whichColor)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,SetBGColor1)
	(this, ev,aFrame,whichColor);
}


/* method: SetBGColor2 */
void   SetBGColor2(Environment *ev,
		ODFrame* aFrame,
		RGBColor whichColor)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,SetBGColor2)
	(this, ev,aFrame,whichColor);
}


/* method: Embed */
void   Embed(Environment *ev,
		short item,
		ODFrame* frame,
		ODPart** newPart)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,Embed)
	(this, ev,item,frame,newPart);
}


/* method: SetGrafPortOrigin */
void   SetGrafPortOrigin(Environment *ev,
		ODFacet* facet)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,SetGrafPortOrigin)
	(this, ev,facet);
}


/* method: InvalEmbedFrameAfterResize */
void   InvalEmbedFrameAfterResize(Environment *ev,
		ODFacet* facet,
		Proxy* selection,
		ODShape* newShape,
		ODTransform* newTransform)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,InvalEmbedFrameAfterResize)
	(this, ev,facet,selection,newShape,newTransform);
}


/* method: GetSelectionRectLocal */
RECTL*   GetSelectionRectLocal(Environment *ev,
		Proxy* selection)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,GetSelectionRectLocal)
	(this, ev,selection);
}


/* method: MakeEmbeddedFrame */
ODFrame*   MakeEmbeddedFrame(Environment *ev,
		ODFrame* containingFrame,
		ODShape* frameShape,
		ODTransform* externalTransform,
		ODPart* embedPart,
		ODBoolean isOverlaid)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,MakeEmbeddedFrame)
	(this, ev,containingFrame,frameShape,externalTransform,embedPart,isOverlaid);
}


/* method: CreateWindow */
ODWindow*   CreateWindow(Environment *ev,
		ODFrame* sourceFrame)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,CreateWindow)
	(this, ev,sourceFrame);
}


/* method: MoveToFront */
ODBoolean   MoveToFront(Environment *ev,
		ODFrame* frame)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,MoveToFront)
	(this, ev,frame);
}


/* method: MoveToBack */
ODBoolean   MoveToBack(Environment *ev,
		ODFrame* frame)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,MoveToBack)
	(this, ev,frame);
}


/* method: MoveForward */
ODBoolean   MoveForward(Environment *ev,
		ODFrame* frame)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,MoveForward)
	(this, ev,frame);
}


/* method: MoveBackward */
ODBoolean   MoveBackward(Environment *ev,
		ODFrame* frame)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,MoveBackward)
	(this, ev,frame);
}


/* method: ClearAccelTable */
void   ClearAccelTable(Environment *ev,
		ODFrame* oldOwner)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,ClearAccelTable)
	(this, ev,oldOwner);
}


/* method: SetAccelTable */
void   SetAccelTable(Environment *ev,
		ODFrame* newOwner)
{
   SOM_ResolveD(this,HelloPart,ContainerPart,SetAccelTable)
	(this, ev,newOwner);
}


/* method: GetDemoState */
long   GetDemoState(Environment *ev)
{
   return SOM_ResolveD(this,HelloPart,ContainerPart,GetDemoState)
	(this, ev);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,HelloPart,SOMObject,somInit)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,HelloPart,SOMObject,somUninit)
	(this);
}


/* method: FulfillPromise */
void   FulfillPromise(Environment *ev,
		ODStorageUnitView* promiseSUView)
{
   SOM_ResolveD(this,HelloPart,ODPart,FulfillPromise)
	(this, ev,promiseSUView);
}


/* method: DropCompleted */
void   DropCompleted(Environment *ev,
		ODPart* destPart,
		ODDropResult dropResult)
{
   SOM_ResolveD(this,HelloPart,ODPart,DropCompleted)
	(this, ev,destPart,dropResult);
}


/* method: DragEnter */
MRESULT   DragEnter(Environment *ev,
		ODDragItemIterator* dragInfo,
		ODFacet* facet,
		ODPoint* where)
{
   return SOM_ResolveD(this,HelloPart,ODPart,DragEnter)
	(this, ev,dragInfo,facet,where);
}


/* method: DragWithin */
MRESULT   DragWithin(Environment *ev,
		ODDragItemIterator* dragInfo,
		ODFacet* facet,
		ODPoint* where)
{
   return SOM_ResolveD(this,HelloPart,ODPart,DragWithin)
	(this, ev,dragInfo,facet,where);
}


/* method: DragLeave */
void   DragLeave(Environment *ev,
		ODFacet* facet,
		ODPoint* where)
{
   SOM_ResolveD(this,HelloPart,ODPart,DragLeave)
	(this, ev,facet,where);
}


/* method: Drop */
ODDropResult   Drop(Environment *ev,
		ODDragItemIterator* dropInfo,
		ODFacet* facet,
		ODPoint* where)
{
   return SOM_ResolveD(this,HelloPart,ODPart,Drop)
	(this, ev,dropInfo,facet,where);
}


/* method: GetExtension */
ODExtension*   GetExtension(Environment *ev,
		ODType extensionName)
{
   return SOM_ResolveD(this,HelloPart,ODObject,GetExtension)
	(this, ev,extensionName);
}


/* method: ReleaseExtension */
void   ReleaseExtension(Environment *ev,
		ODExtension* extension)
{
   SOM_ResolveD(this,HelloPart,ODObject,ReleaseExtension)
	(this, ev,extension);
}


/* method: HasExtension */
boolean   HasExtension(Environment *ev,
		ODType extensionName)
{
   return SOM_ResolveD(this,HelloPart,ODObject,HasExtension)
	(this, ev,extensionName);
}


/* method: ContainingPartPropertiesChanged */
void   ContainingPartPropertiesChanged(Environment *ev,
		ODFrame* frame,
		ODStorageUnit* propertyUnit)
{
   SOM_ResolveD(this,HelloPart,ODPart,ContainingPartPropertiesChanged)
	(this, ev,frame,propertyUnit);
}


/* method: GetContainingPartProperties */
ODStorageUnit*   GetContainingPartProperties(Environment *ev,
		ODFrame* frame)
{
   return SOM_ResolveD(this,HelloPart,ODPart,GetContainingPartProperties)
	(this, ev,frame);
}


/* method: CreateRootMenuBar */
ODMenuBar*   CreateRootMenuBar(Environment *ev,
		ODFrame* frame)
{
   return SOM_ResolveD(this,HelloPart,ODPart,CreateRootMenuBar)
	(this, ev,frame);
}


/* method: RevealFrame */
void   RevealFrame(Environment *ev,
		ODFrame* embeddedFrame,
		ODShape* revealShape)
{
   SOM_ResolveD(this,HelloPart,ODPart,RevealFrame)
	(this, ev,embeddedFrame,revealShape);
}


/* method: EmbeddedFrameSpec */
void   EmbeddedFrameSpec(Environment *ev,
		ODFrame* embeddedFrame,
		ODObjectSpec spec)
{
   SOM_ResolveD(this,HelloPart,ODPart,EmbeddedFrameSpec)
	(this, ev,embeddedFrame,spec);
}


/* method: CreateEmbeddedFramesIterator */
ODEmbeddedFramesIterator*   CreateEmbeddedFramesIterator(Environment *ev,
		ODFrame* frame)
{
   return SOM_ResolveD(this,HelloPart,ODPart,CreateEmbeddedFramesIterator)
	(this, ev,frame);
}


/* method: AddDisplayFrame */
void   AddDisplayFrame(Environment *ev,
		ODFrame* frame)
{
   SOM_ResolveD(this,HelloPart,ODPart,AddDisplayFrame)
	(this, ev,frame);
}


/* method: AttachSourceFrame */
void   AttachSourceFrame(Environment *ev,
		ODFrame* frame,
		ODFrame* sourceFrame)
{
   SOM_ResolveD(this,HelloPart,ODPart,AttachSourceFrame)
	(this, ev,frame,sourceFrame);
}


/* method: RemoveDisplayFrame */
void   RemoveDisplayFrame(Environment *ev,
		ODFrame* frame)
{
   SOM_ResolveD(this,HelloPart,ODPart,RemoveDisplayFrame)
	(this, ev,frame);
}


/* method: CloseDisplayFrame */
void   CloseDisplayFrame(Environment *ev,
		ODFrame* frame)
{
   SOM_ResolveD(this,HelloPart,ODPart,CloseDisplayFrame)
	(this, ev,frame);
}


/* method: FrameShapeChanged */
void   FrameShapeChanged(Environment *ev,
		ODFrame* frame)
{
   SOM_ResolveD(this,HelloPart,ODPart,FrameShapeChanged)
	(this, ev,frame);
}


/* method: ViewTypeChanged */
void   ViewTypeChanged(Environment *ev,
		ODFrame* frame)
{
   SOM_ResolveD(this,HelloPart,ODPart,ViewTypeChanged)
	(this, ev,frame);
}


/* method: PresentationChanged */
void   PresentationChanged(Environment *ev,
		ODFrame* frame)
{
   SOM_ResolveD(this,HelloPart,ODPart,PresentationChanged)
	(this, ev,frame);
}


/* method: SequenceChanged */
void   SequenceChanged(Environment *ev,
		ODFrame* frame)
{
   SOM_ResolveD(this,HelloPart,ODPart,SequenceChanged)
	(this, ev,frame);
}


/* method: WritePartInfo */
void   WritePartInfo(Environment *ev,
		ODPtr partInfo,
		ODStorageUnitView* storageUnitView)
{
   SOM_ResolveD(this,HelloPart,ODPart,WritePartInfo)
	(this, ev,partInfo,storageUnitView);
}


/* method: ReadPartInfo */
ODPtr   ReadPartInfo(Environment *ev,
		ODFrame* frame,
		ODStorageUnitView* storageUnitView)
{
   return SOM_ResolveD(this,HelloPart,ODPart,ReadPartInfo)
	(this, ev,frame,storageUnitView);
}


/* method: Open */
ODID   Open(Environment *ev,
		ODFrame* frame)
{
   return SOM_ResolveD(this,HelloPart,ODPart,Open)
	(this, ev,frame);
}


/* method: RequestEmbeddedFrame */
ODFrame*   RequestEmbeddedFrame(Environment *ev,
		ODFrame* containingFrame,
		ODFrame* baseFrame,
		ODShape* frameShape,
		ODPart* embedPart,
		ODTypeToken viewType,
		ODTypeToken presentation,
		ODBoolean isOverlaid)
{
   return SOM_ResolveD(this,HelloPart,ODPart,RequestEmbeddedFrame)
	(this, ev,containingFrame,baseFrame,frameShape,embedPart,viewType,presentation,isOverlaid);
}


/* method: RemoveEmbeddedFrame */
void   RemoveEmbeddedFrame(Environment *ev,
		ODFrame* embeddedFrame)
{
   SOM_ResolveD(this,HelloPart,ODPart,RemoveEmbeddedFrame)
	(this, ev,embeddedFrame);
}


/* method: RequestFrameShape */
ODShape*   RequestFrameShape(Environment *ev,
		ODFrame* embeddedFrame,
		ODShape* frameShape)
{
   return SOM_ResolveD(this,HelloPart,ODPart,RequestFrameShape)
	(this, ev,embeddedFrame,frameShape);
}


/* method: UsedShapeChanged */
void   UsedShapeChanged(Environment *ev,
		ODFrame* embeddedFrame)
{
   SOM_ResolveD(this,HelloPart,ODPart,UsedShapeChanged)
	(this, ev,embeddedFrame);
}


/* method: AdjustBorderShape */
ODShape*   AdjustBorderShape(Environment *ev,
		ODFrame* embeddedFrame,
		ODShape* shape)
{
   return SOM_ResolveD(this,HelloPart,ODPart,AdjustBorderShape)
	(this, ev,embeddedFrame,shape);
}


/* method: FacetAdded */
void   FacetAdded(Environment *ev,
		ODFacet* facet)
{
   SOM_ResolveD(this,HelloPart,ODPart,FacetAdded)
	(this, ev,facet);
}


/* method: FacetRemoved */
void   FacetRemoved(Environment *ev,
		ODFacet* facet)
{
   SOM_ResolveD(this,HelloPart,ODPart,FacetRemoved)
	(this, ev,facet);
}


/* method: CanvasChanged */
void   CanvasChanged(Environment *ev,
		ODFacet* facet)
{
   SOM_ResolveD(this,HelloPart,ODPart,CanvasChanged)
	(this, ev,facet);
}


/* method: GeometryChanged */
void   GeometryChanged(Environment *ev,
		ODFacet* facet)
{
   SOM_ResolveD(this,HelloPart,ODPart,GeometryChanged)
	(this, ev,facet);
}


/* method: Draw */
void   Draw(Environment *ev,
		ODFacet* facet,
		ODShape* invalidShape)
{
   SOM_ResolveD(this,HelloPart,ODPart,Draw)
	(this, ev,facet,invalidShape);
}


/* method: CanvasUpdated */
void   CanvasUpdated(Environment *ev,
		ODCanvas* canvas)
{
   SOM_ResolveD(this,HelloPart,ODPart,CanvasUpdated)
	(this, ev,canvas);
}


/* method: HighlightChanged */
void   HighlightChanged(Environment *ev,
		ODFacet* facet)
{
   SOM_ResolveD(this,HelloPart,ODPart,HighlightChanged)
	(this, ev,facet);
}


/* method: GetPrintResolution */
ODULong   GetPrintResolution(Environment *ev,
		ODFrame* frame)
{
   return SOM_ResolveD(this,HelloPart,ODPart,GetPrintResolution)
	(this, ev,frame);
}


/* method: CreateLink */
ODLink*   CreateLink(Environment *ev,
		ODPtr data,
		ODULong size)
{
   return SOM_ResolveD(this,HelloPart,ODPart,CreateLink)
	(this, ev,data,size);
}


/* method: LinkUpdated */
void   LinkUpdated(Environment *ev,
		ODLink* updatedLink,
		ODChangeID id)
{
   SOM_ResolveD(this,HelloPart,ODPart,LinkUpdated)
	(this, ev,updatedLink,id);
}


/* method: RevealLink */
void   RevealLink(Environment *ev,
		ODLinkSource* linkSource)
{
   SOM_ResolveD(this,HelloPart,ODPart,RevealLink)
	(this, ev,linkSource);
}


/* method: EmbeddedFrameChanged */
void   EmbeddedFrameChanged(Environment *ev,
		ODFrame* frame,
		ODChangeID change)
{
   SOM_ResolveD(this,HelloPart,ODPart,EmbeddedFrameChanged)
	(this, ev,frame,change);
}


/* method: LinkStatusChanged */
void   LinkStatusChanged(Environment *ev,
		ODFrame* frame)
{
   SOM_ResolveD(this,HelloPart,ODPart,LinkStatusChanged)
	(this, ev,frame);
}


/* method: BeginRelinquishFocus */
ODBoolean   BeginRelinquishFocus(Environment *ev,
		ODTypeToken focus,
		ODFrame* ownerFrame,
		ODFrame* proposedFrame)
{
   return SOM_ResolveD(this,HelloPart,ODPart,BeginRelinquishFocus)
	(this, ev,focus,ownerFrame,proposedFrame);
}


/* method: CommitRelinquishFocus */
void   CommitRelinquishFocus(Environment *ev,
		ODTypeToken focus,
		ODFrame* ownerFrame,
		ODFrame* proposedFrame)
{
   SOM_ResolveD(this,HelloPart,ODPart,CommitRelinquishFocus)
	(this, ev,focus,ownerFrame,proposedFrame);
}


/* method: AbortRelinquishFocus */
void   AbortRelinquishFocus(Environment *ev,
		ODTypeToken focus,
		ODFrame* ownerFrame,
		ODFrame* proposedFrame)
{
   SOM_ResolveD(this,HelloPart,ODPart,AbortRelinquishFocus)
	(this, ev,focus,ownerFrame,proposedFrame);
}


/* method: FocusAcquired */
void   FocusAcquired(Environment *ev,
		ODTypeToken focus,
		ODFrame* ownerFrame)
{
   SOM_ResolveD(this,HelloPart,ODPart,FocusAcquired)
	(this, ev,focus,ownerFrame);
}


/* method: FocusLost */
void   FocusLost(Environment *ev,
		ODTypeToken focus,
		ODFrame* ownerFrame)
{
   SOM_ResolveD(this,HelloPart,ODPart,FocusLost)
	(this, ev,focus,ownerFrame);
}


/* method: CloneInto */
void   CloneInto(Environment *ev,
		ODDraftKey key,
		ODStorageUnit* storageUnit,
		ODStorageUnit* initiatingFrame)
{
   SOM_ResolveD(this,HelloPart,ODPart,CloneInto)
	(this, ev,key,storageUnit,initiatingFrame);
}


/* method: ExternalizeKinds */
void   ExternalizeKinds(Environment *ev,
		ODTypeList* kindset)
{
   SOM_ResolveD(this,HelloPart,ODPart,ExternalizeKinds)
	(this, ev,kindset);
}


/* method: Externalize */
void   Externalize(Environment *ev)
{
   SOM_ResolveD(this,HelloPart,ODPersistentObject,Externalize)
	(this, ev);
}


/* method: ChangeKind */
void   ChangeKind(Environment *ev,
		ODType kind)
{
   SOM_ResolveD(this,HelloPart,ODPart,ChangeKind)
	(this, ev,kind);
}


/* method: HandleEvent */
ODBoolean   HandleEvent(Environment *ev,
		ODEventData* event,
		ODFrame* frame,
		ODFacet* facet)
{
   return SOM_ResolveD(this,HelloPart,ODPart,HandleEvent)
	(this, ev,event,frame,facet);
}


/* method: HandleEventInEmbedded */
ODBoolean   HandleEventInEmbedded(Environment *ev,
		ODEventData* event,
		ODFrame* frame,
		ODFacet* facet,
		ODFrame* embeddedFrame,
		ODFacet* embeddedFacet)
{
   return SOM_ResolveD(this,HelloPart,ODPart,HandleEventInEmbedded)
	(this, ev,event,frame,facet,embeddedFrame,embeddedFacet);
}


/* method: MouseEnter */
void   MouseEnter(Environment *ev,
		ODFacet* facet,
		ODPoint* where)
{
   SOM_ResolveD(this,HelloPart,ODPart,MouseEnter)
	(this, ev,facet,where);
}


/* method: MouseWithin */
void   MouseWithin(Environment *ev,
		ODFacet* facet,
		ODPoint* where)
{
   SOM_ResolveD(this,HelloPart,ODPart,MouseWithin)
	(this, ev,facet,where);
}


/* method: MouseLeave */
void   MouseLeave(Environment *ev,
		ODFacet* facet)
{
   SOM_ResolveD(this,HelloPart,ODPart,MouseLeave)
	(this, ev,facet);
}


/* method: AdjustMenus */
void   AdjustMenus(Environment *ev,
		ODFrame* frame)
{
   SOM_ResolveD(this,HelloPart,ODPart,AdjustMenus)
	(this, ev,frame);
}


/* method: UndoAction */
void   UndoAction(Environment *ev,
		ODActionData actionState)
{
   SOM_ResolveD(this,HelloPart,ODPart,UndoAction)
	(this, ev,actionState);
}


/* method: RedoAction */
void   RedoAction(Environment *ev,
		ODActionData actionState)
{
   SOM_ResolveD(this,HelloPart,ODPart,RedoAction)
	(this, ev,actionState);
}


/* method: DisposeActionState */
void   DisposeActionState(Environment *ev,
		ODActionData actionState,
		ODDoneState doneState)
{
   SOM_ResolveD(this,HelloPart,ODPart,DisposeActionState)
	(this, ev,actionState,doneState);
}


/* method: WriteActionState */
void   WriteActionState(Environment *ev,
		ODPtr actionState,
		ODStorageUnitView* storageUnitView)
{
   SOM_ResolveD(this,HelloPart,ODPart,WriteActionState)
	(this, ev,actionState,storageUnitView);
}


/* method: ReadActionState */
ODPtr   ReadActionState(Environment *ev,
		ODStorageUnitView* storageUnitView)
{
   return SOM_ResolveD(this,HelloPart,ODPart,ReadActionState)
	(this, ev,storageUnitView);
}


/* method: InitPart */
void   InitPart(Environment *ev,
		ODStorageUnit* storageUnit)
{
   SOM_ResolveD(this,HelloPart,ODPart,InitPart)
	(this, ev,storageUnit);
}


/* method: InitPartFromStorage */
void   InitPartFromStorage(Environment *ev,
		ODStorageUnit* storageUnit)
{
   SOM_ResolveD(this,HelloPart,ODPart,InitPartFromStorage)
	(this, ev,storageUnit);
}


/* method: Release */
void   Release(Environment *ev)
{
   SOM_ResolveD(this,HelloPart,ODRefCntObject,Release)
	(this, ev);
}


/* method: InitPersistentObject */
void   InitPersistentObject(Environment *ev,
		ODStorageUnit* storageUnit)
{
   SOM_ResolveD(this,HelloPart,ODPersistentObject,InitPersistentObject)
	(this, ev,storageUnit);
}


/* method: InitPersistentObjectFromStorage */
void   InitPersistentObjectFromStorage(Environment *ev,
		ODStorageUnit* storageUnit)
{
   SOM_ResolveD(this,HelloPart,ODPersistentObject,InitPersistentObjectFromStorage)
	(this, ev,storageUnit);
}


/* method: ReleaseAll */
void   ReleaseAll(Environment *ev)
{
   SOM_ResolveD(this,HelloPart,ODPersistentObject,ReleaseAll)
	(this, ev);
}


/* method: GetStorageUnit */
ODStorageUnit*   GetStorageUnit(Environment *ev)
{
   return SOM_ResolveD(this,HelloPart,ODPersistentObject,GetStorageUnit)
	(this, ev);
}


/* method: GetID */
ODID   GetID(Environment *ev)
{
   return SOM_ResolveD(this,HelloPart,ODPersistentObject,GetID)
	(this, ev);
}


/* method: InitRefCntObject */
void   InitRefCntObject(Environment *ev)
{
   SOM_ResolveD(this,HelloPart,ODRefCntObject,InitRefCntObject)
	(this, ev);
}


/* method: IncrementRefCount */
void   IncrementRefCount(Environment *ev)
{
   SOM_ResolveD(this,HelloPart,ODRefCntObject,IncrementRefCount)
	(this, ev);
}


/* method: GetRefCount */
ODULong   GetRefCount(Environment *ev)
{
   return SOM_ResolveD(this,HelloPart,ODRefCntObject,GetRefCount)
	(this, ev);
}


/* method: InitObject */
void   InitObject(Environment *ev)
{
   SOM_ResolveD(this,HelloPart,ODObject,InitObject)
	(this, ev);
}


/* method: IsInitialized */
boolean   IsInitialized(Environment *ev)
{
   return SOM_ResolveD(this,HelloPart,ODObject,IsInitialized)
	(this, ev);
}


/* method: Purge */
ODSize   Purge(Environment *ev,
		ODSize size)
{
   return SOM_ResolveD(this,HelloPart,ODObject,Purge)
	(this, ev,size);
}


/* method: SubClassResponsibility */
void   SubClassResponsibility(Environment *ev)
{
   SOM_ResolveD(this,HelloPart,ODObject,SubClassResponsibility)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,HelloPart,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,HelloPart,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,HelloPart,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
HelloPart*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,HelloPart,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,HelloPart,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,HelloPart,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,HelloPart,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
HelloPart*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,HelloPart,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
HelloPart*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,HelloPart,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
HelloPart*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,HelloPart,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,HelloPart,SOMObject,somFree)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,HelloPart,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,HelloPart,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,HelloPart,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,HelloPart,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,HelloPart,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,HelloPart,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   HelloPart_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,HelloPart,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,HelloPart,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   HelloPart_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,HelloPart,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,HelloPart,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,HelloPart,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,HelloPart,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */
/* the va_list invocation form */
void   HelloPart_somDispatchV(somId methodId,
		somId descriptor,
		va_list ap)
{
   SOM_ResolveD(this,HelloPart,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,HelloPart,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */
/* the va_list invocation form */
long   HelloPart_somDispatchL(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,HelloPart,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,HelloPart,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */
/* the va_list invocation form */
void*   HelloPart_somDispatchA(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,HelloPart,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,HelloPart,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */
/* the va_list invocation form */
double   HelloPart_somDispatchD(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,HelloPart,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,HelloPart,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,HelloPart,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,HelloPart,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,HelloPart,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* HelloPart */



#endif       /* SOM_HelloPart_xh */
