
/*
 * This file was generated by the SOM Compiler.
 * FileName: hello.xih.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.2
 *     SOM Emitter emitxih: 2.41
 */

/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_HelloPart_xih
#define SOM_HelloPart_xih

#include <somcls.xh>
#include <somcm.xh>

#ifndef SOM_HelloPart_xh
#include <hello.xh>
#endif

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope extern "C"
#endif

#define HelloPart_MaxNoMethods 3

/*
 * -- Instance Data
 */
typedef struct {
	ODStorageUnit* StorageUnit;
	ODULong Iteration;
	ODSession* Session;
	ODBoolean Initialized;
	ODFocusSet* FocusSet;
	ODTypeToken SelectionFocus;
	ODTypeToken MenuFocus;
	ODTypeToken KeyFocus;
	HelloPart_HPS hpsMem;
	HelloPart_HDC hdcMem;
} HelloPartData;

/*
 * -- Getdata Macro
 */

/*
 * -- This emitter treats Data Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to override this default.
 */
typedef HelloPartData* (SOMLINK * somTD_HelloPart_DataThunk)(void*);
#define HelloPartGetData(somSelf) \
   (((somTD_HelloPart_DataThunk)(HelloPartCClassData.instanceDataToken))(somSelf))

/*
 * -- Instance Data Access Macros for use in Method Procedures
 */
#ifdef VARIABLE_MACROS
  #define _StorageUnit (somThis->StorageUnit)
  #define _Iteration (somThis->Iteration)
  #define _Session (somThis->Session)
  #define _Initialized (somThis->Initialized)
  #define _FocusSet (somThis->FocusSet)
  #define _SelectionFocus (somThis->SelectionFocus)
  #define _MenuFocus (somThis->MenuFocus)
  #define _KeyFocus (somThis->KeyFocus)
  #define _hpsMem (somThis->hpsMem)
  #define _hdcMem (somThis->hdcMem)
#endif


/*
 * -- Primary Implementation File Support
 */
#if (defined(HelloPart_Class_Source) || defined(SOM_Module_hello_Source))

/*
 * Trace/Debug macro
 */
#ifndef HelloPartMethodDebug
   #define HelloPartMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * -- Method Macros for use in Method Procedures
 */
#ifdef METHOD_MACROS
  #define _GetSemanticInterface somSelf->GetSemanticInterface
  #define _ProxyForFrame somSelf->ProxyForFrame
  #define _CreateProxySelectionBorder somSelf->CreateProxySelectionBorder
  #define _InvalidateSelection somSelf->InvalidateSelection
  #define _ClipEmbeddedFrames somSelf->ClipEmbeddedFrames
  #define _CommonInitContainerPart somSelf->CommonInitContainerPart
  #define _GetEmbeddedFrames somSelf->GetEmbeddedFrames
  #define _ProxyForFrameID somSelf->ProxyForFrameID
  #define _HighlightSelection somSelf->HighlightSelection
  #define _HighlightProxyBorder somSelf->HighlightProxyBorder
  #define _HighlightContentObject somSelf->HighlightContentObject
  #define _ClipEmbeddedFacets somSelf->ClipEmbeddedFacets
  #define _FillSelectedMenu somSelf->FillSelectedMenu
  #define _AdjustPopupMenu somSelf->AdjustPopupMenu
  #define _AdjustSPEMenu somSelf->AdjustSPEMenu
  #define _EmptySelection somSelf->EmptySelection
  #define _GetSPEMenuOfSelection somSelf->GetSPEMenuOfSelection
  #define _RefreshRemappedSPEMenuOfSelection somSelf->RefreshRemappedSPEMenuOfSelection
  #define _HandleMouseDown somSelf->HandleMouseDown
  #define _MoveResize somSelf->MoveResize
  #define _HandleMouseDownDrag somSelf->HandleMouseDownDrag
  #define _HandleMouseDownEdgeResize somSelf->HandleMouseDownEdgeResize
  #define _HandleMouseDownCornerResize somSelf->HandleMouseDownCornerResize
  #define _HandleMouseDownInEmbeddedFrame somSelf->HandleMouseDownInEmbeddedFrame
  #define _HandleKeyDown somSelf->HandleKeyDown
  #define _HandleMenuEvent somSelf->HandleMenuEvent
  #define _HandleMouseMove somSelf->HandleMouseMove
  #define _HandleMouseUp somSelf->HandleMouseUp
  #define _UpdateTrackRect somSelf->UpdateTrackRect
  #define _MouseFocusLost somSelf->MouseFocusLost
  #define _HandlePrinting somSelf->HandlePrinting
  #define _BeginPrinting somSelf->BeginPrinting
  #define _PrintPage somSelf->PrintPage
  #define _PrintPages somSelf->PrintPages
  #define _EndPrinting somSelf->EndPrinting
  #define _DoCut somSelf->DoCut
  #define _DoCopy somSelf->DoCopy
  #define _DoPaste somSelf->DoPaste
  #define _DoPasteLink somSelf->DoPasteLink
  #define _DoClear somSelf->DoClear
  #define _DoSelectAll somSelf->DoSelectAll
  #define _ActivateFrame somSelf->ActivateFrame
  #define _DeActivateFrame somSelf->DeActivateFrame
  #define _ActivatingWindow somSelf->ActivatingWindow
  #define _DeActivatingWindow somSelf->DeActivatingWindow
  #define _InstallMenus somSelf->InstallMenus
  #define _RemoveMenus somSelf->RemoveMenus
  #define _UserSetBGColor somSelf->UserSetBGColor
  #define _SetBGColor1 somSelf->SetBGColor1
  #define _SetBGColor2 somSelf->SetBGColor2
  #define _Embed somSelf->Embed
  #define _SetGrafPortOrigin somSelf->SetGrafPortOrigin
  #define _InvalEmbedFrameAfterResize somSelf->InvalEmbedFrameAfterResize
  #define _GetSelectionRectLocal somSelf->GetSelectionRectLocal
  #define _MakeEmbeddedFrame somSelf->MakeEmbeddedFrame
  #define _CreateWindow somSelf->CreateWindow
  #define _MoveToFront somSelf->MoveToFront
  #define _MoveToBack somSelf->MoveToBack
  #define _MoveForward somSelf->MoveForward
  #define _MoveBackward somSelf->MoveBackward
  #define _ClearAccelTable somSelf->ClearAccelTable
  #define _SetAccelTable somSelf->SetAccelTable
  #define _GetDemoState somSelf->GetDemoState
  #define _FulfillPromise somSelf->FulfillPromise
  #define _DropCompleted somSelf->DropCompleted
  #define _DragEnter somSelf->DragEnter
  #define _DragWithin somSelf->DragWithin
  #define _DragLeave somSelf->DragLeave
  #define _Drop somSelf->Drop
  #define _ContainingPartPropertiesChanged somSelf->ContainingPartPropertiesChanged
  #define _GetContainingPartProperties somSelf->GetContainingPartProperties
  #define _RevealFrame somSelf->RevealFrame
  #define _EmbeddedFrameSpec somSelf->EmbeddedFrameSpec
  #define _CreateEmbeddedFramesIterator somSelf->CreateEmbeddedFramesIterator
  #define _AddDisplayFrame somSelf->AddDisplayFrame
  #define _AttachSourceFrame somSelf->AttachSourceFrame
  #define _RemoveDisplayFrame somSelf->RemoveDisplayFrame
  #define _CloseDisplayFrame somSelf->CloseDisplayFrame
  #define _FrameShapeChanged somSelf->FrameShapeChanged
  #define _ViewTypeChanged somSelf->ViewTypeChanged
  #define _PresentationChanged somSelf->PresentationChanged
  #define _SequenceChanged somSelf->SequenceChanged
  #define _WritePartInfo somSelf->WritePartInfo
  #define _ReadPartInfo somSelf->ReadPartInfo
  #define _Open somSelf->Open
  #define _RequestEmbeddedFrame somSelf->RequestEmbeddedFrame
  #define _RemoveEmbeddedFrame somSelf->RemoveEmbeddedFrame
  #define _RequestFrameShape somSelf->RequestFrameShape
  #define _UsedShapeChanged somSelf->UsedShapeChanged
  #define _AdjustBorderShape somSelf->AdjustBorderShape
  #define _FacetAdded somSelf->FacetAdded
  #define _FacetRemoved somSelf->FacetRemoved
  #define _CanvasChanged somSelf->CanvasChanged
  #define _GeometryChanged somSelf->GeometryChanged
  #define _Draw somSelf->Draw
  #define _CanvasUpdated somSelf->CanvasUpdated
  #define _HighlightChanged somSelf->HighlightChanged
  #define _GetPrintResolution somSelf->GetPrintResolution
  #define _CreateLink somSelf->CreateLink
  #define _LinkUpdated somSelf->LinkUpdated
  #define _RevealLink somSelf->RevealLink
  #define _EmbeddedFrameChanged somSelf->EmbeddedFrameChanged
  #define _LinkStatusChanged somSelf->LinkStatusChanged
  #define _BeginRelinquishFocus somSelf->BeginRelinquishFocus
  #define _CommitRelinquishFocus somSelf->CommitRelinquishFocus
  #define _AbortRelinquishFocus somSelf->AbortRelinquishFocus
  #define _FocusAcquired somSelf->FocusAcquired
  #define _FocusLost somSelf->FocusLost
  #define _CloneInto somSelf->CloneInto
  #define _ExternalizeKinds somSelf->ExternalizeKinds
  #define _ChangeKind somSelf->ChangeKind
  #define _HandleEvent somSelf->HandleEvent
  #define _HandleEventInEmbedded somSelf->HandleEventInEmbedded
  #define _MouseEnter somSelf->MouseEnter
  #define _MouseWithin somSelf->MouseWithin
  #define _MouseLeave somSelf->MouseLeave
  #define _AdjustMenus somSelf->AdjustMenus
  #define _CreateRootMenuBar somSelf->CreateRootMenuBar
  #define _UndoAction somSelf->UndoAction
  #define _RedoAction somSelf->RedoAction
  #define _DisposeActionState somSelf->DisposeActionState
  #define _WriteActionState somSelf->WriteActionState
  #define _ReadActionState somSelf->ReadActionState
  #define _InitPart somSelf->InitPart
  #define _InitPartFromStorage somSelf->InitPartFromStorage
  #define _InitPersistentObject somSelf->InitPersistentObject
  #define _InitPersistentObjectFromStorage somSelf->InitPersistentObjectFromStorage
  #define _ReleaseAll somSelf->ReleaseAll
  #define _Externalize somSelf->Externalize
  #define _GetStorageUnit somSelf->GetStorageUnit
  #define _GetID somSelf->GetID
  #define _InitRefCntObject somSelf->InitRefCntObject
  #define _IncrementRefCount somSelf->IncrementRefCount
  #define _Release somSelf->Release
  #define _GetRefCount somSelf->GetRefCount
  #define _InitObject somSelf->InitObject
  #define _IsInitialized somSelf->IsInitialized
  #define _HasExtension somSelf->HasExtension
  #define _GetExtension somSelf->GetExtension
  #define _ReleaseExtension somSelf->ReleaseExtension
  #define _Purge somSelf->Purge
  #define _SubClassResponsibility somSelf->SubClassResponsibility
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somDefaultCopyInit somSelf->somDefaultCopyInit
  #define _somDefaultAssign somSelf->somDefaultAssign
  #define _somDefaultConstCopyInit somSelf->somDefaultConstCopyInit
  #define _somDefaultVCopyInit somSelf->somDefaultVCopyInit
  #define _somDefaultConstVCopyInit somSelf->somDefaultConstVCopyInit
  #define _somDefaultConstAssign somSelf->somDefaultConstAssign
  #define _somDefaultVAssign somSelf->somDefaultVAssign
  #define _somDefaultConstVAssign somSelf->somDefaultConstVAssign
  #define _somInit somSelf->somInit
  #define _somFree somSelf->somFree
  #define _somUninit somSelf->somUninit
  #define _somGetClass somSelf->somGetClass
  #define _somGetClassName somSelf->somGetClassName
  #define _somGetSize somSelf->somGetSize
  #define _somIsA somSelf->somIsA
  #define _somIsInstanceOf somSelf->somIsInstanceOf
  #define _somRespondsTo somSelf->somRespondsTo
  #define _somDispatch somSelf->somDispatch
  #define _somClassDispatch somSelf->somClassDispatch
  #define _somCastObj somSelf->somCastObj
  #define _somResetObj somSelf->somResetObj
  #define _somDispatchV somSelf->somDispatchV
  #define _somDispatchL somSelf->somDispatchL
  #define _somDispatchA somSelf->somDispatchA
  #define _somDispatchD somSelf->somDispatchD
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somDumpSelf somSelf->somDumpSelf
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define _CommonInitPart somSelf->CommonInitPart
  #define _SetOrigin somSelf->SetOrigin
  #define _RenderPart somSelf->RenderPart
  #define _somInit somSelf->somInit
  #define _somUninit somSelf->somUninit
  #define _Draw somSelf->Draw
  #define _Externalize somSelf->Externalize
  #define _HandleEvent somSelf->HandleEvent
  #define _InitPart somSelf->InitPart
  #define _InitPartFromStorage somSelf->InitPartFromStorage
#endif


/*
 * -- The HelloPart ClassData Structure
 */
SOMEXTERN struct HelloPartClassDataStructure SOMDLINK HelloPartClassData = {(SOMClass *) NULL};

/*
 * -- The auxiliary HelloPart ClassData structure
 */
SOMEXTERN struct HelloPartCClassDataStructure SOMDLINK HelloPartCClassData = {(somMethodTabs) NULL};


/*
 * -- Apply Stubs for New Methods
 */
static void SOMLINK somAP_HelloCommonInitPart(HelloPart *somSelf,
		void *__retVal,
		somMethodProc *__methodPtr,
		va_list __ap)
{
	somSelf = va_arg(__ap, HelloPart*);
	Environment *ev = va_arg(__ap, Environment*);
	ODStorageUnit* su = va_arg(__ap, ODStorageUnit*);
	SOM_IgnoreWarning(__retVal);

	((somTD_HelloPart_CommonInitPart) __methodPtr) (somSelf, ev, su);
}

static void SOMLINK somAP_HelloSetOrigin(HelloPart *somSelf,
		void *__retVal,
		somMethodProc *__methodPtr,
		va_list __ap)
{
	somSelf = va_arg(__ap, HelloPart*);
	Environment *ev = va_arg(__ap, Environment*);
	ODFacet* facet = va_arg(__ap, ODFacet*);
	SOM_IgnoreWarning(__retVal);

	((somTD_HelloPart_SetOrigin) __methodPtr) (somSelf, ev, facet);
}

static void SOMLINK somAP_HelloRenderPart(HelloPart *somSelf,
		void *__retVal,
		somMethodProc *__methodPtr,
		va_list __ap)
{
	somSelf = va_arg(__ap, HelloPart*);
	Environment *ev = va_arg(__ap, Environment*);
	ODFacet* facet = va_arg(__ap, ODFacet*);
	RECTL* pframeRect = va_arg(__ap, RECTL*);
	HelloPart_HPS hpsDraw = va_arg(__ap, HelloPart_HPS);
	SOM_IgnoreWarning(__retVal);

	((somTD_HelloPart_RenderPart) __methodPtr) (somSelf, ev, facet,pframeRect,hpsDraw);
}


/*
 * New Method: CommonInitPart
 */
SOM_Scope void  SOMLINK HelloCommonInitPart(HelloPart *somSelf, Environment *ev,
		ODStorageUnit* su);
#ifndef somMN_CommonInitPart_defined
#define somMN_CommonInitPart_defined
static char *somMN_CommonInitPart = "CommonInitPart";
static somId somId_CommonInitPart = &somMN_CommonInitPart;
#endif  /* somMN_CommonInitPart_defined */
#ifndef somDS_CommonInitPart_defined
#define somDS_CommonInitPart_defined
static char *somDS_CommonInitPart = "::HelloPart::CommonInitPart";
static somId somDI_CommonInitPart = &somDS_CommonInitPart;
#endif  /* somDS_CommonInitPart_defined */
static void  SOMLINK somRD_HelloCommonInitPart(HelloPart *somSelf, Environment *ev,
		ODStorageUnit* su)
{
	void* __retVal;

	somSelf->somDispatch((void **)&__retVal, somId_CommonInitPart, somSelf , ev
		,su);
}

/*
 * New Method: SetOrigin
 */
SOM_Scope void  SOMLINK HelloSetOrigin(HelloPart *somSelf, Environment *ev,
		ODFacet* facet);
#ifndef somMN_SetOrigin_defined
#define somMN_SetOrigin_defined
static char *somMN_SetOrigin = "SetOrigin";
static somId somId_SetOrigin = &somMN_SetOrigin;
#endif  /* somMN_SetOrigin_defined */
#ifndef somDS_SetOrigin_defined
#define somDS_SetOrigin_defined
static char *somDS_SetOrigin = "::HelloPart::SetOrigin";
static somId somDI_SetOrigin = &somDS_SetOrigin;
#endif  /* somDS_SetOrigin_defined */
static void  SOMLINK somRD_HelloSetOrigin(HelloPart *somSelf, Environment *ev,
		ODFacet* facet)
{
	void* __retVal;

	somSelf->somDispatch((void **)&__retVal, somId_SetOrigin, somSelf , ev
		,facet);
}

/*
 * New Method: RenderPart
 */
SOM_Scope void  SOMLINK HelloRenderPart(HelloPart *somSelf, Environment *ev,
		ODFacet* facet,
		RECTL* pframeRect,
		HelloPart_HPS hpsDraw);
#ifndef somMN_RenderPart_defined
#define somMN_RenderPart_defined
static char *somMN_RenderPart = "RenderPart";
static somId somId_RenderPart = &somMN_RenderPart;
#endif  /* somMN_RenderPart_defined */
#ifndef somDS_RenderPart_defined
#define somDS_RenderPart_defined
static char *somDS_RenderPart = "::HelloPart::RenderPart";
static somId somDI_RenderPart = &somDS_RenderPart;
#endif  /* somDS_RenderPart_defined */
static void  SOMLINK somRD_HelloRenderPart(HelloPart *somSelf, Environment *ev,
		ODFacet* facet,
		RECTL* pframeRect,
		HelloPart_HPS hpsDraw)
{
	void* __retVal;

	somSelf->somDispatch((void **)&__retVal, somId_RenderPart, somSelf , ev
		,facet,pframeRect,hpsDraw);
}

/*
 * Overridden method: somInit
 */
SOM_Scope void  SOMLINK HellosomInit(HelloPart *somSelf);
static char *somMN_HelloPartsomInit = "SOMObject::somInit";
static somId somId_HelloPartsomInit = &somMN_HelloPartsomInit;
#ifdef somId_somInit
#undef somId_somInit
#else
#define somId_somInit somId_HelloPartsomInit
#endif
typedef void   (SOMLINK * somTD_xih_HelloPart_somInit)(HelloPart *somSelf);
/* define the parent method call macro */
#define HelloPart_parent_ContainerPart_somInit(__somSelf) \
	somSelf = (__somSelf,somSelf) /* pcalls for somInit/somUninit turned off */
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_somInit
  #ifdef parent_somInit
    #define SOMGD_pmc_parent_somInit
    #undef parent_somInit
  #else
#define parent_somInit HelloPart_parent_ContainerPart_somInit
  #endif
#endif
#ifndef SOMGD_pmc_parent_ContainerPart_somInit
  #ifdef parent_ContainerPart_somInit
    #define SOMGD_pmc_parent_ContainerPart_somInit
    #undef parent_ContainerPart_somInit
  #else
    #define parent_ContainerPart_somInit HelloPart_parent_ContainerPart_somInit
  #endif
#endif
#define HelloPart_parents_somInit(somSelf) (somSelf)

/*
 * Overridden method: somUninit
 */
SOM_Scope void  SOMLINK HellosomUninit(HelloPart *somSelf);
static char *somMN_HelloPartsomUninit = "SOMObject::somUninit";
static somId somId_HelloPartsomUninit = &somMN_HelloPartsomUninit;
#ifdef somId_somUninit
#undef somId_somUninit
#else
#define somId_somUninit somId_HelloPartsomUninit
#endif
typedef void   (SOMLINK * somTD_xih_HelloPart_somUninit)(HelloPart *somSelf);
/* define the parent method call macro */
#define HelloPart_parent_ContainerPart_somUninit(__somSelf) \
	somSelf = (__somSelf,somSelf) /* pcalls for somInit/somUninit turned off */
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_somUninit
  #ifdef parent_somUninit
    #define SOMGD_pmc_parent_somUninit
    #undef parent_somUninit
  #else
#define parent_somUninit HelloPart_parent_ContainerPart_somUninit
  #endif
#endif
#ifndef SOMGD_pmc_parent_ContainerPart_somUninit
  #ifdef parent_ContainerPart_somUninit
    #define SOMGD_pmc_parent_ContainerPart_somUninit
    #undef parent_ContainerPart_somUninit
  #else
    #define parent_ContainerPart_somUninit HelloPart_parent_ContainerPart_somUninit
  #endif
#endif
#define HelloPart_parents_somUninit(somSelf) (somSelf)

/*
 * Overridden method: Draw
 */
SOM_Scope void  SOMLINK HelloDraw(HelloPart *somSelf, Environment *ev,
		ODFacet* facet,
		ODShape* invalidShape);
static char *somMN_HelloPartDraw = "ODPart::Draw";
static somId somId_HelloPartDraw = &somMN_HelloPartDraw;
#ifdef somId_Draw
#undef somId_Draw
#else
#define somId_Draw somId_HelloPartDraw
#endif
typedef void   (SOMLINK * somTD_xih_HelloPart_Draw)(HelloPart *somSelf, Environment *ev,
		ODFacet* facet,
		ODShape* invalidShape);
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ContainerPart_Draw_resolved = 0;
#define HelloPart_parent_ContainerPart_Draw(somSelf,ev,facet,invalidShape) \
  ((( somTD_xih_HelloPart_Draw ) \
    ((HelloPart_parent_ContainerPart_Draw_resolved)? \
      HelloPart_parent_ContainerPart_Draw_resolved : \
      (HelloPart_parent_ContainerPart_Draw_resolved = \
          somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.Draw)))) \
   (somSelf,ev,facet,invalidShape))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_Draw
  #ifdef parent_Draw
    #define SOMGD_pmc_parent_Draw
    #undef parent_Draw
  #else
#define parent_Draw HelloPart_parent_ContainerPart_Draw
  #endif
#endif
#ifndef SOMGD_pmc_parent_ContainerPart_Draw
  #ifdef parent_ContainerPart_Draw
    #define SOMGD_pmc_parent_ContainerPart_Draw
    #undef parent_ContainerPart_Draw
  #else
    #define parent_ContainerPart_Draw HelloPart_parent_ContainerPart_Draw
  #endif
#endif
#define HelloPart_parents_Draw(arg0,arg1,arg2) (\
   HelloPart_parent_ContainerPart_Draw(arg0,arg1,arg2))

/*
 * Overridden method: Externalize
 */
SOM_Scope void  SOMLINK HelloExternalize(HelloPart *somSelf, Environment *ev);
static char *somMN_HelloPartExternalize = "ODPersistentObject::Externalize";
static somId somId_HelloPartExternalize = &somMN_HelloPartExternalize;
#ifdef somId_Externalize
#undef somId_Externalize
#else
#define somId_Externalize somId_HelloPartExternalize
#endif
typedef void   (SOMLINK * somTD_xih_HelloPart_Externalize)(HelloPart *somSelf, Environment *ev);
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ContainerPart_Externalize_resolved = 0;
#define HelloPart_parent_ContainerPart_Externalize(somSelf,ev) \
  ((( somTD_xih_HelloPart_Externalize ) \
    ((HelloPart_parent_ContainerPart_Externalize_resolved)? \
      HelloPart_parent_ContainerPart_Externalize_resolved : \
      (HelloPart_parent_ContainerPart_Externalize_resolved = \
          somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPersistentObjectClassData.Externalize)))) \
   (somSelf,ev))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_Externalize
  #ifdef parent_Externalize
    #define SOMGD_pmc_parent_Externalize
    #undef parent_Externalize
  #else
#define parent_Externalize HelloPart_parent_ContainerPart_Externalize
  #endif
#endif
#ifndef SOMGD_pmc_parent_ContainerPart_Externalize
  #ifdef parent_ContainerPart_Externalize
    #define SOMGD_pmc_parent_ContainerPart_Externalize
    #undef parent_ContainerPart_Externalize
  #else
    #define parent_ContainerPart_Externalize HelloPart_parent_ContainerPart_Externalize
  #endif
#endif
#define HelloPart_parents_Externalize(arg0) (\
   HelloPart_parent_ContainerPart_Externalize(arg0))

/*
 * Overridden method: HandleEvent
 */
SOM_Scope ODBoolean  SOMLINK HelloHandleEvent(HelloPart *somSelf, Environment *ev,
		ODEventData* event,
		ODFrame* frame,
		ODFacet* facet);
static char *somMN_HelloPartHandleEvent = "ODPart::HandleEvent";
static somId somId_HelloPartHandleEvent = &somMN_HelloPartHandleEvent;
#ifdef somId_HandleEvent
#undef somId_HandleEvent
#else
#define somId_HandleEvent somId_HelloPartHandleEvent
#endif
typedef ODBoolean   (SOMLINK * somTD_xih_HelloPart_HandleEvent)(HelloPart *somSelf, Environment *ev,
		ODEventData* event,
		ODFrame* frame,
		ODFacet* facet);
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ContainerPart_HandleEvent_resolved = 0;
#define HelloPart_parent_ContainerPart_HandleEvent(somSelf,ev,event,frame,facet) \
  ((( somTD_xih_HelloPart_HandleEvent ) \
    ((HelloPart_parent_ContainerPart_HandleEvent_resolved)? \
      HelloPart_parent_ContainerPart_HandleEvent_resolved : \
      (HelloPart_parent_ContainerPart_HandleEvent_resolved = \
          somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.HandleEvent)))) \
   (somSelf,ev,event,frame,facet))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_HandleEvent
  #ifdef parent_HandleEvent
    #define SOMGD_pmc_parent_HandleEvent
    #undef parent_HandleEvent
  #else
#define parent_HandleEvent HelloPart_parent_ContainerPart_HandleEvent
  #endif
#endif
#ifndef SOMGD_pmc_parent_ContainerPart_HandleEvent
  #ifdef parent_ContainerPart_HandleEvent
    #define SOMGD_pmc_parent_ContainerPart_HandleEvent
    #undef parent_ContainerPart_HandleEvent
  #else
    #define parent_ContainerPart_HandleEvent HelloPart_parent_ContainerPart_HandleEvent
  #endif
#endif
#define HelloPart_parents_HandleEvent(arg0,arg1,arg2,arg3) (\
   HelloPart_parent_ContainerPart_HandleEvent(arg0,arg1,arg2,arg3))

/*
 * Overridden method: InitPart
 */
SOM_Scope void  SOMLINK HelloInitPart(HelloPart *somSelf, Environment *ev,
		ODStorageUnit* storageUnit);
static char *somMN_HelloPartInitPart = "ODPart::InitPart";
static somId somId_HelloPartInitPart = &somMN_HelloPartInitPart;
#ifdef somId_InitPart
#undef somId_InitPart
#else
#define somId_InitPart somId_HelloPartInitPart
#endif
typedef void   (SOMLINK * somTD_xih_HelloPart_InitPart)(HelloPart *somSelf, Environment *ev,
		ODStorageUnit* storageUnit);
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ContainerPart_InitPart_resolved = 0;
#define HelloPart_parent_ContainerPart_InitPart(somSelf,ev,storageUnit) \
  ((( somTD_xih_HelloPart_InitPart ) \
    ((HelloPart_parent_ContainerPart_InitPart_resolved)? \
      HelloPart_parent_ContainerPart_InitPart_resolved : \
      (HelloPart_parent_ContainerPart_InitPart_resolved = \
          somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.InitPart)))) \
   (somSelf,ev,storageUnit))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_InitPart
  #ifdef parent_InitPart
    #define SOMGD_pmc_parent_InitPart
    #undef parent_InitPart
  #else
#define parent_InitPart HelloPart_parent_ContainerPart_InitPart
  #endif
#endif
#ifndef SOMGD_pmc_parent_ContainerPart_InitPart
  #ifdef parent_ContainerPart_InitPart
    #define SOMGD_pmc_parent_ContainerPart_InitPart
    #undef parent_ContainerPart_InitPart
  #else
    #define parent_ContainerPart_InitPart HelloPart_parent_ContainerPart_InitPart
  #endif
#endif
#define HelloPart_parents_InitPart(arg0,arg1) (\
   HelloPart_parent_ContainerPart_InitPart(arg0,arg1))

/*
 * Overridden method: InitPartFromStorage
 */
SOM_Scope void  SOMLINK HelloInitPartFromStorage(HelloPart *somSelf, Environment *ev,
		ODStorageUnit* storageUnit);
static char *somMN_HelloPartInitPartFromStorage = "ODPart::InitPartFromStorage";
static somId somId_HelloPartInitPartFromStorage = &somMN_HelloPartInitPartFromStorage;
#ifdef somId_InitPartFromStorage
#undef somId_InitPartFromStorage
#else
#define somId_InitPartFromStorage somId_HelloPartInitPartFromStorage
#endif
typedef void   (SOMLINK * somTD_xih_HelloPart_InitPartFromStorage)(HelloPart *somSelf, Environment *ev,
		ODStorageUnit* storageUnit);
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ContainerPart_InitPartFromStorage_resolved = 0;
#define HelloPart_parent_ContainerPart_InitPartFromStorage(somSelf,ev,storageUnit) \
  ((( somTD_xih_HelloPart_InitPartFromStorage ) \
    ((HelloPart_parent_ContainerPart_InitPartFromStorage_resolved)? \
      HelloPart_parent_ContainerPart_InitPartFromStorage_resolved : \
      (HelloPart_parent_ContainerPart_InitPartFromStorage_resolved = \
          somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.InitPartFromStorage)))) \
   (somSelf,ev,storageUnit))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_InitPartFromStorage
  #ifdef parent_InitPartFromStorage
    #define SOMGD_pmc_parent_InitPartFromStorage
    #undef parent_InitPartFromStorage
  #else
#define parent_InitPartFromStorage HelloPart_parent_ContainerPart_InitPartFromStorage
  #endif
#endif
#ifndef SOMGD_pmc_parent_ContainerPart_InitPartFromStorage
  #ifdef parent_ContainerPart_InitPartFromStorage
    #define SOMGD_pmc_parent_ContainerPart_InitPartFromStorage
    #undef parent_ContainerPart_InitPartFromStorage
  #else
    #define parent_ContainerPart_InitPartFromStorage HelloPart_parent_ContainerPart_InitPartFromStorage
  #endif
#endif
#define HelloPart_parents_InitPartFromStorage(arg0,arg1) (\
   HelloPart_parent_ContainerPart_InitPartFromStorage(arg0,arg1))

/*
 * -- Routines and Structures to create the class object
 */


/*
 * Declare the Static Methods table.
 */
static somStaticMethod_t HelloPartSM[] = {
    {    &HelloPartClassData.CommonInitPart,
         &somId_CommonInitPart,
         &somDI_CommonInitPart,
         (somMethodProc *) HelloCommonInitPart,
         (somMethodProc *) somRD_HelloCommonInitPart,
         (somMethodProc *) somAP_HelloCommonInitPart    },
    {    &HelloPartClassData.SetOrigin,
         &somId_SetOrigin,
         &somDI_SetOrigin,
         (somMethodProc *) HelloSetOrigin,
         (somMethodProc *) somRD_HelloSetOrigin,
         (somMethodProc *) somAP_HelloSetOrigin    },
    {    &HelloPartClassData.RenderPart,
         &somId_RenderPart,
         &somDI_RenderPart,
         (somMethodProc *) HelloRenderPart,
         (somMethodProc *) somRD_HelloRenderPart,
         (somMethodProc *) somAP_HelloRenderPart    },
};


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t HelloPartOM[] = {
    {    &somId_HelloPartsomInit,
         (somMethodProc *) HellosomInit  },
    {    &somId_HelloPartsomUninit,
         (somMethodProc *) HellosomUninit  },
    {    &somId_HelloPartDraw,
         (somMethodProc *) HelloDraw  },
    {    &somId_HelloPartExternalize,
         (somMethodProc *) HelloExternalize  },
    {    &somId_HelloPartHandleEvent,
         (somMethodProc *) HelloHandleEvent  },
    {    &somId_HelloPartInitPart,
         (somMethodProc *) HelloInitPart  },
    {    &somId_HelloPartInitPartFromStorage,
         (somMethodProc *) HelloInitPartFromStorage  },
};


/*
 *  class Ids
 */
static char * somCN_HelloPart = "HelloPart";
static char * somPCN_HelloPart_ContainerPart = "ContainerPart";

static somId somPCHelloPart[] = {
    &somPCN_HelloPart_ContainerPart,
};

static somStaticClassInfo HelloPartSCI = {
    4, 3, 7, 0, 0, 0, /* layout version 4 */ 
    HelloPart_MajorVersion, HelloPart_MinorVersion,
    sizeof(HelloPartData), HelloPart_MaxNoMethods, 1,
    &somCN_HelloPart,
    (somId) NULL, 1,
    somPCHelloPart,
    (somClassDataStructure *) &HelloPartClassData,
    (somCClassDataStructure *) &HelloPartCClassData,
    HelloPartSM, HelloPartOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,
   (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    0, /* default alignment */
    -1, /* use parents as DirectInitClasses */
    0, /* no explicit DirectInitClasses */
    0, /* number of general methods */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    3, /* number of classdata entries */
    0, /* no list provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* not a DTS class */
    0, /* no dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK HelloPartNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    ContainerPartNewClass(ContainerPart_MajorVersion,ContainerPart_MinorVersion);	/* static reference */
    return (SOMClass*) ((void*)(somBuildClass(1,&HelloPartSCI, somtmajorVersion, somtminorVersion)));
}

/*
 * Functions for attributes.
 */

/*
 * Macros for initializer/destructor entry/exit
 */

#endif /* Primary Implementation Support */

#endif       /* SOM_HelloPart_xih */
